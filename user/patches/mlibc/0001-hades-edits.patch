From 48a71948210ffb41c393ce5bbd2696cc5d3a6924 Mon Sep 17 00:00:00 2001
From: Yavuz Rao <yavuz.rao@gmail.com>
Date: Sun, 8 Dec 2024 19:16:55 -0500
Subject: [PATCH] hades edits

---
 abis/hades/auxv.h                            |   8 +
 abis/hades/errno.h                           | 148 +++++++
 abis/hades/gid_t.h                           |   6 +
 abis/hades/ino_t.h                           |   9 +
 abis/hades/mode_t.h                          |   6 +
 abis/hades/nlink_t.h                         |   8 +
 abis/hades/pid_t.h                           |   7 +
 abis/hades/seek-whence.h                     |   8 +
 abis/hades/signal.h                          | 142 +++++++
 abis/hades/termios.h                         | 115 ++++++
 abis/hades/uid_t.h                           |   6 +
 abis/hades/vm-flags.h                        |  46 +++
 abis/hades/wait.h                            |  28 ++
 meson.build                                  |   7 +
 options/rtld/generic/main.cpp                |   6 +-
 sysdeps/hades/crt-x86_64/crt0.S              |   9 +
 sysdeps/hades/generic/entry.cpp              |  69 ++++
 sysdeps/hades/generic/filesystem.cpp         |  84 ++++
 sysdeps/hades/generic/generic.cpp            | 188 +++++++++
 sysdeps/hades/generic/signals.S              |   9 +
 sysdeps/hades/generic/signals.cpp            |  59 +++
 sysdeps/hades/include/abi-bits/access.h      |   1 +
 sysdeps/hades/include/abi-bits/auxv.h        |   1 +
 sysdeps/hades/include/abi-bits/blkcnt_t.h    |   1 +
 sysdeps/hades/include/abi-bits/blksize_t.h   |   1 +
 sysdeps/hades/include/abi-bits/clockid_t.h   |   1 +
 sysdeps/hades/include/abi-bits/dev_t.h       |   1 +
 sysdeps/hades/include/abi-bits/epoll.h       |   1 +
 sysdeps/hades/include/abi-bits/errno.h       |   1 +
 sysdeps/hades/include/abi-bits/fcntl.h       |   1 +
 sysdeps/hades/include/abi-bits/fsblkcnt_t.h  |   1 +
 sysdeps/hades/include/abi-bits/fsfilcnt_t.h  |   1 +
 sysdeps/hades/include/abi-bits/gid_t.h       |   1 +
 sysdeps/hades/include/abi-bits/in.h          |   1 +
 sysdeps/hades/include/abi-bits/ino_t.h       |   1 +
 sysdeps/hades/include/abi-bits/inotify.h     |   1 +
 sysdeps/hades/include/abi-bits/ioctls.h      |   1 +
 sysdeps/hades/include/abi-bits/limits.h      |   1 +
 sysdeps/hades/include/abi-bits/mode_t.h      |   1 +
 sysdeps/hades/include/abi-bits/mqueue.h      |   1 +
 sysdeps/hades/include/abi-bits/msg.h         |   1 +
 sysdeps/hades/include/abi-bits/nlink_t.h     |   1 +
 sysdeps/hades/include/abi-bits/packet.h      |   1 +
 sysdeps/hades/include/abi-bits/pid_t.h       |   1 +
 sysdeps/hades/include/abi-bits/poll.h        |   1 +
 sysdeps/hades/include/abi-bits/ptrace.h      |   1 +
 sysdeps/hades/include/abi-bits/resource.h    |   1 +
 sysdeps/hades/include/abi-bits/seek-whence.h |   1 +
 sysdeps/hades/include/abi-bits/shm.h         |   1 +
 sysdeps/hades/include/abi-bits/signal.h      |   1 +
 sysdeps/hades/include/abi-bits/socket.h      |   1 +
 sysdeps/hades/include/abi-bits/socklen_t.h   |   1 +
 sysdeps/hades/include/abi-bits/stat.h        |   1 +
 sysdeps/hades/include/abi-bits/statfs.h      |   1 +
 sysdeps/hades/include/abi-bits/statvfs.h     |   1 +
 sysdeps/hades/include/abi-bits/statx.h       |   1 +
 sysdeps/hades/include/abi-bits/suseconds_t.h |   1 +
 sysdeps/hades/include/abi-bits/termios.h     |   1 +
 sysdeps/hades/include/abi-bits/time.h        |   1 +
 sysdeps/hades/include/abi-bits/uid_t.h       |   1 +
 sysdeps/hades/include/abi-bits/utsname.h     |   1 +
 sysdeps/hades/include/abi-bits/vm-flags.h    |   1 +
 sysdeps/hades/include/abi-bits/wait.h        |   1 +
 sysdeps/hades/include/abi-bits/xattr.h       |   1 +
 sysdeps/hades/include/asm/ioctl.h            | 105 +++++
 sysdeps/hades/include/asm/ioctls.h           | 121 ++++++
 sysdeps/hades/include/hades/syscall.h        | 193 +++++++++
 sysdeps/hades/include/linux/fb.h             | 400 +++++++++++++++++++
 sysdeps/hades/meson.build                    |  89 +++++
 69 files changed, 1916 insertions(+), 3 deletions(-)
 create mode 100644 abis/hades/auxv.h
 create mode 100644 abis/hades/errno.h
 create mode 100644 abis/hades/gid_t.h
 create mode 100644 abis/hades/ino_t.h
 create mode 100644 abis/hades/mode_t.h
 create mode 100644 abis/hades/nlink_t.h
 create mode 100644 abis/hades/pid_t.h
 create mode 100644 abis/hades/seek-whence.h
 create mode 100644 abis/hades/signal.h
 create mode 100644 abis/hades/termios.h
 create mode 100644 abis/hades/uid_t.h
 create mode 100644 abis/hades/vm-flags.h
 create mode 100644 abis/hades/wait.h
 create mode 100644 sysdeps/hades/crt-x86_64/crt0.S
 create mode 100644 sysdeps/hades/generic/entry.cpp
 create mode 100644 sysdeps/hades/generic/filesystem.cpp
 create mode 100644 sysdeps/hades/generic/generic.cpp
 create mode 100644 sysdeps/hades/generic/signals.S
 create mode 100644 sysdeps/hades/generic/signals.cpp
 create mode 120000 sysdeps/hades/include/abi-bits/access.h
 create mode 120000 sysdeps/hades/include/abi-bits/auxv.h
 create mode 120000 sysdeps/hades/include/abi-bits/blkcnt_t.h
 create mode 120000 sysdeps/hades/include/abi-bits/blksize_t.h
 create mode 120000 sysdeps/hades/include/abi-bits/clockid_t.h
 create mode 120000 sysdeps/hades/include/abi-bits/dev_t.h
 create mode 120000 sysdeps/hades/include/abi-bits/epoll.h
 create mode 120000 sysdeps/hades/include/abi-bits/errno.h
 create mode 120000 sysdeps/hades/include/abi-bits/fcntl.h
 create mode 120000 sysdeps/hades/include/abi-bits/fsblkcnt_t.h
 create mode 120000 sysdeps/hades/include/abi-bits/fsfilcnt_t.h
 create mode 120000 sysdeps/hades/include/abi-bits/gid_t.h
 create mode 120000 sysdeps/hades/include/abi-bits/in.h
 create mode 120000 sysdeps/hades/include/abi-bits/ino_t.h
 create mode 120000 sysdeps/hades/include/abi-bits/inotify.h
 create mode 120000 sysdeps/hades/include/abi-bits/ioctls.h
 create mode 120000 sysdeps/hades/include/abi-bits/limits.h
 create mode 120000 sysdeps/hades/include/abi-bits/mode_t.h
 create mode 120000 sysdeps/hades/include/abi-bits/mqueue.h
 create mode 120000 sysdeps/hades/include/abi-bits/msg.h
 create mode 120000 sysdeps/hades/include/abi-bits/nlink_t.h
 create mode 120000 sysdeps/hades/include/abi-bits/packet.h
 create mode 120000 sysdeps/hades/include/abi-bits/pid_t.h
 create mode 120000 sysdeps/hades/include/abi-bits/poll.h
 create mode 120000 sysdeps/hades/include/abi-bits/ptrace.h
 create mode 120000 sysdeps/hades/include/abi-bits/resource.h
 create mode 120000 sysdeps/hades/include/abi-bits/seek-whence.h
 create mode 120000 sysdeps/hades/include/abi-bits/shm.h
 create mode 120000 sysdeps/hades/include/abi-bits/signal.h
 create mode 120000 sysdeps/hades/include/abi-bits/socket.h
 create mode 120000 sysdeps/hades/include/abi-bits/socklen_t.h
 create mode 120000 sysdeps/hades/include/abi-bits/stat.h
 create mode 120000 sysdeps/hades/include/abi-bits/statfs.h
 create mode 120000 sysdeps/hades/include/abi-bits/statvfs.h
 create mode 120000 sysdeps/hades/include/abi-bits/statx.h
 create mode 120000 sysdeps/hades/include/abi-bits/suseconds_t.h
 create mode 120000 sysdeps/hades/include/abi-bits/termios.h
 create mode 120000 sysdeps/hades/include/abi-bits/time.h
 create mode 120000 sysdeps/hades/include/abi-bits/uid_t.h
 create mode 120000 sysdeps/hades/include/abi-bits/utsname.h
 create mode 120000 sysdeps/hades/include/abi-bits/vm-flags.h
 create mode 120000 sysdeps/hades/include/abi-bits/wait.h
 create mode 120000 sysdeps/hades/include/abi-bits/xattr.h
 create mode 100644 sysdeps/hades/include/asm/ioctl.h
 create mode 100644 sysdeps/hades/include/asm/ioctls.h
 create mode 100644 sysdeps/hades/include/hades/syscall.h
 create mode 100644 sysdeps/hades/include/linux/fb.h
 create mode 100644 sysdeps/hades/meson.build

diff --git a/abis/hades/auxv.h b/abis/hades/auxv.h
new file mode 100644
index 00000000..134e4223
--- /dev/null
+++ b/abis/hades/auxv.h
@@ -0,0 +1,8 @@
+#ifndef _ABIBITS_AUXV_H
+#define _ABIBITS_AUXV_H
+
+#define AT_SECURE 23
+#define AT_RANDOM 25
+#define AT_EXECFN 31
+
+#endif
\ No newline at end of file
diff --git a/abis/hades/errno.h b/abis/hades/errno.h
new file mode 100644
index 00000000..515ca52e
--- /dev/null
+++ b/abis/hades/errno.h
@@ -0,0 +1,148 @@
+#ifndef _ABIBITS_ERRNO_H
+#define _ABIBITS_ERRNO_H
+
+#define	EPERM		1		/* Operation not permitted */
+#define	ENOENT		2		/* No such file or directory */
+#define	ESRCH		3		/* No such process */
+#define	EINTR		4		/* Interrupted system call */
+#define	EIO		    5		/* Input/output error */
+#define	ENXIO		6		/* Device not configured */
+#define	E2BIG		7		/* Argument list too long */
+#define	ENOEXEC		8		/* Exec format error */
+#define	EBADF		9		/* Bad file descriptor */
+#define	ECHILD		10		/* No child processes */
+#define	EDEADLK		11		/* Resource deadlock avoided */
+					/* 11 was EAGAIN */
+
+#define	ENOMEM		12		/* Cannot allocate memory */
+#define	EACCES		13		/* Permission denied */
+#define	EFAULT		14		/* Bad address */
+
+#define	ENOTBLK		15		/* Block device required */
+#define	EBUSY		16		/* Device busy */
+
+#define	EEXIST		17		/* File exists */
+#define	EXDEV		18		/* Cross-device link */
+#define	ENODEV		19		/* Operation not supported by device */
+#define	ENOTDIR		20		/* Not a directory */
+#define	EISDIR		21		/* Is a directory */
+#define	EINVAL		22		/* Invalid argument */
+#define	ENFILE		23		/* Too many open files in system */
+#define	EMFILE		24		/* Too many open files */
+#define	ENOTTY		25		/* Inappropriate ioctl for device */
+
+#define	ETXTBSY		26		/* Text file busy */
+
+#define	EFBIG		27		/* File too large */
+#define	ENOSPC		28		/* No space left on device */
+#define	ESPIPE		29		/* Illegal seek */
+#define	EROFS		30		/* Read-only file system */
+#define	EMLINK		31		/* Too many links */
+#define	EPIPE		32		/* Broken pipe */
+
+/* math software */
+#define	EDOM		33		/* Numerical argument out of domain */
+#define	ERANGE		34		/* Result too large */
+
+/* non-blocking and interrupt i/o */
+#define	EAGAIN		35		/* Resource temporarily unavailable */
+
+#define	EWOULDBLOCK	EAGAIN		/* Operation would block */
+#define	EINPROGRESS	36		/* Operation now in progress */
+#define	EALREADY	37		/* Operation already in progress */
+
+/* ipc/network software -- argument errors */
+#define	ENOTSOCK	38		/* Socket operation on non-socket */
+#define	EDESTADDRREQ	39		/* Destination address required */
+#define	EMSGSIZE	40		/* Message too long */
+#define	EPROTOTYPE	41		/* Protocol wrong type for socket */
+#define	ENOPROTOOPT	42		/* Protocol not available */
+#define	EPROTONOSUPPORT	43		/* Protocol not supported */
+#define	ESOCKTNOSUPPORT	44		/* Socket type not supported */
+#define	EOPNOTSUPP	45		/* Operation not supported on socket */
+#define	EPFNOSUPPORT	46		/* Protocol family not supported */
+#define	EAFNOSUPPORT	47		/* Address family not supported by protocol family */
+#define	EADDRINUSE	48		/* Address already in use */
+#define	EADDRNOTAVAIL	49		/* Can't assign requested address */
+
+/* ipc/network software -- operational errors */
+#define	ENETDOWN	50		/* Network is down */
+#define	ENETUNREACH	51		/* Network is unreachable */
+#define	ENETRESET	52		/* Network dropped connection on reset */
+#define	ECONNABORTED	53		/* Software caused connection abort */
+#define	ECONNRESET	54		/* Connection reset by peer */
+#define	ENOBUFS		55		/* No buffer space available */
+#define	EISCONN		56		/* Socket is already connected */
+#define	ENOTCONN	57		/* Socket is not connected */
+#define	ESHUTDOWN	58		/* Can't send after socket shutdown */
+#define	ETOOMANYREFS	59		/* Too many references: can't splice */
+#define	ETIMEDOUT	60		/* Connection timed out */
+#define	ECONNREFUSED	61		/* Connection refused */
+
+#define	ELOOP		62		/* Too many levels of symbolic links */
+
+#define	ENAMETOOLONG	63		/* File name too long */
+
+/* should be rearranged */
+#define	EHOSTDOWN	64		/* Host is down */
+#define	EHOSTUNREACH	65		/* No route to host */
+#define	ENOTEMPTY	66		/* Directory not empty */
+
+/* quotas & mush */
+#define	EPROCLIM	67		/* Too many processes */
+#define	EUSERS		68		/* Too many users */
+#define	EDQUOT		69		/* Disc quota exceeded */
+
+/* Network File System */
+#define	ESTALE		70		/* Stale NFS file handle */
+#define	EREMOTE		71		/* Too many levels of remote in path */
+#define	EBADRPC		72		/* RPC struct is bad */
+#define	ERPCMISMATCH	73		/* RPC version wrong */
+#define	EPROGUNAVAIL	74		/* RPC prog. not avail */
+#define	EPROGMISMATCH	75		/* Program version wrong */
+#define	EPROCUNAVAIL	76		/* Bad procedure for program */
+
+
+#define	ENOLCK		77		/* No locks available */
+#define	ENOSYS		78		/* Function not implemented */
+
+#define	EFTYPE		79		/* Inappropriate file type or format */
+#define EOVERFLOW   80
+#define EILSEQ      81
+
+#define EBADMSG			82
+#define ECANCELED		83
+#define EIDRM			84
+#define EMULTIHOP		85
+#define ENOLINK			86
+#define ENOMSG			87
+#define ENOTRECOVERABLE	88
+#define EOWNERDEAD		90
+#define EPROTO			91
+#define ENODATA			92
+#define ETIME			93
+#define ENOKEY			94
+#define EBADFD			95
+#define ENOMEDIUM		96
+#define ENONET			97
+#define ESTRPIPE		98
+#define EREMOTEIO		99
+#define ERFKILL			100
+#define EBADR			101
+#define EUNATCH			102
+#define EMEDIUMTYPE		103
+#define EKEYREJECTED	104
+#define EUCLEAN			105
+#define EBADSLT			106
+#define ENOANO			107
+#define ENOCSI			108
+#define ENOSTR			109
+#define ENOPKG			110
+#define EKEYREVOKED		111
+#define EXFULL			112
+#define ELNRNG			113
+#define ENOTUNIQ		114
+#define ERESTART		115
+#define ENOTSUP			116
+
+#endif
diff --git a/abis/hades/gid_t.h b/abis/hades/gid_t.h
new file mode 100644
index 00000000..65d16ed4
--- /dev/null
+++ b/abis/hades/gid_t.h
@@ -0,0 +1,6 @@
+#ifndef _ABIBITS_GID_T_H
+#define _ABIBITS_GID_T_H
+
+typedef int gid_t;
+
+#endif // _ABIBITS_GID_T_H
\ No newline at end of file
diff --git a/abis/hades/ino_t.h b/abis/hades/ino_t.h
new file mode 100644
index 00000000..e27f5e1f
--- /dev/null
+++ b/abis/hades/ino_t.h
@@ -0,0 +1,9 @@
+
+#ifndef _ABIBITS_INO_T_H
+#define _ABIBITS_INO_T_H
+
+// TODO: use (u)int64_t?
+typedef signed long int ino_t;
+
+#endif // _ABIBITS_INO_T_H
+
diff --git a/abis/hades/mode_t.h b/abis/hades/mode_t.h
new file mode 100644
index 00000000..55c890b6
--- /dev/null
+++ b/abis/hades/mode_t.h
@@ -0,0 +1,6 @@
+#ifndef _ABIBITS_MODE_T_H
+#define _ABIBITS_MODE_T_H
+
+typedef long int mode_t;
+
+#endif // _ABIBITS_MODE_T_H
\ No newline at end of file
diff --git a/abis/hades/nlink_t.h b/abis/hades/nlink_t.h
new file mode 100644
index 00000000..63860d99
--- /dev/null
+++ b/abis/hades/nlink_t.h
@@ -0,0 +1,8 @@
+
+#ifndef _ABIBITS_NLINK_T_H
+#define _ABIBITS_NLINK_T_H
+
+typedef long nlink_t;
+
+#endif // _ABIBITS_NLINK_T_H
+
diff --git a/abis/hades/pid_t.h b/abis/hades/pid_t.h
new file mode 100644
index 00000000..a83f29cd
--- /dev/null
+++ b/abis/hades/pid_t.h
@@ -0,0 +1,7 @@
+
+#ifndef _ABIBITS_PID_T_H
+#define _ABIBITS_PID_T_H
+
+typedef long int pid_t;
+
+#endif // _ABIBITS_PID_T_H
\ No newline at end of file
diff --git a/abis/hades/seek-whence.h b/abis/hades/seek-whence.h
new file mode 100644
index 00000000..a458a263
--- /dev/null
+++ b/abis/hades/seek-whence.h
@@ -0,0 +1,8 @@
+#ifndef _ABIBITS_SEEK_WHENCE_H
+#define _ABIBITS_SEEK_WHENCE_H
+
+#define SEEK_SET 1
+#define SEEK_CUR 2
+#define SEEK_END 3
+
+#endif // _ABIBITS_SEEK_WHENCE_H
\ No newline at end of file
diff --git a/abis/hades/signal.h b/abis/hades/signal.h
new file mode 100644
index 00000000..2a91d022
--- /dev/null
+++ b/abis/hades/signal.h
@@ -0,0 +1,142 @@
+#ifndef _ABIBITS_SIGNAL_H
+#define _ABIBITS_SIGNAL_H
+
+#include <abi-bits/pid_t.h>
+#include <abi-bits/uid_t.h>
+#include <bits/size_t.h>
+
+union sigval {
+    int sival_int;
+    void *sival_ptr;
+};
+
+typedef struct {
+    int si_signo;
+    int si_code;
+    int si_errno;
+    pid_t si_pid;
+    uid_t si_uid;
+    void *si_addr;
+    int si_status;
+    union sigval si_value;
+} siginfo_t;
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+typedef void (*__sighandler) (int);
+
+#define SIG_ERR ((__sighandler)(void *)(-1))
+#define SIG_DFL ((__sighandler)(void *)(0))
+#define SIG_IGN ((__sighandler)(void *)(1))
+
+#define SIGABRT 6
+#define SIGFPE 8
+#define SIGILL 4
+#define SIGINT 2
+#define SIGSEGV 11
+#define SIGTERM 15
+#define SIGPROF 27
+#define SIGIO 29
+#define SIGPWR 30
+#define SIGRTMIN 35
+#define SIGRTMAX 64
+
+#define SIGHUP    1
+#define SIGQUIT   3
+#define SIGTRAP   5
+#define SIGIOT    SIGABRT
+#define SIGBUS    7
+#define SIGKILL   9
+#define SIGUSR1   10
+#define SIGUSR2   12
+#define SIGPIPE   13
+#define SIGALRM   14
+#define SIGSTKFLT 16
+#define SIGCHLD   17
+#define SIGCONT   18
+#define SIGSTOP   19
+#define SIGTSTP   20
+#define SIGTTIN   21
+#define SIGTTOU   22
+#define SIGURG    23
+#define SIGXCPU   24
+#define SIGXFSZ   25
+#define SIGVTALRM 26
+#define SIGWINCH  28
+#define SIGPOLL   29
+#define SIGSYS    31
+#define SIGUNUSED SIGSYS
+#define SIGCANCEL 32
+
+#define SIG_BLOCK 0
+#define SIG_UNBLOCK 1
+#define SIG_SETMASK 2
+
+#define SA_NOCLDSTOP 1
+#define SA_NOCLDWAIT 2
+#define SA_SIGINFO 4
+#define SA_ONSTACK 0x08000000
+#define SA_RESTART 0x10000000
+#define SA_NODEFER 0x40000000
+#define SA_RESETHAND 0x80000000
+
+#define MINSIGSTKSZ 2048
+#define SIGSTKSZ 8192
+#define SS_ONSTACK 1
+#define SS_DISABLE 2
+
+#define SI_ASYNCNL (-60)
+#define SI_TKILL (-6)
+#define SI_SIGIO (-5)
+#define SI_ASYNCIO (-4)
+#define SI_MESGQ (-3)
+#define SI_TIMER (-2)
+#define SI_QUEUE (-1)
+#define SI_USER 0
+#define SI_KERNEL 128
+
+#define NSIG 65
+
+typedef unsigned long sigset_t;
+
+struct sigaction {
+    union {
+        void (*sa_handler)(int signum);
+        void (*sa_sigaction)(int signum, siginfo_t *siginfo, void *context);
+    };
+
+    sigset_t sa_mask;
+    int sa_flags;
+    void (*sa_restorer)(void);
+};
+
+typedef struct __stack {
+	void *ss_sp;
+	size_t ss_size;
+	int ss_flags;
+} stack_t;
+
+typedef struct {
+    unsigned long rax, rbx, rcx, rdx, rbp, rdi, rsi, r8, r9, r10, r11, r12, r13, r14, r15;
+    unsigned long rsp, rip;
+    
+    unsigned long ss, cs, fs;
+    unsigned long rflags;
+    unsigned long cr3;
+} mcontext_t;
+
+typedef struct __ucontext {
+    unsigned long uc_flags;
+    struct __ucontext *uc_link;
+    stack_t uc_stack;
+    mcontext_t uc_mcontext;
+    sigset_t uc_sigmask;
+} ucontext_t;
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _ABIBITS_SIGNAL_H */
diff --git a/abis/hades/termios.h b/abis/hades/termios.h
new file mode 100644
index 00000000..36bd6487
--- /dev/null
+++ b/abis/hades/termios.h
@@ -0,0 +1,115 @@
+#ifndef _ABIBITS_TERMIOS_H
+#define _ABIBITS_TERMIOS_H
+
+typedef unsigned char cc_t;
+typedef unsigned int speed_t;
+typedef unsigned int tcflag_t;
+
+#define NCCS     32
+#define VINTR    0
+#define VQUIT    1
+#define VERASE   2
+#define VKILL    3
+#define VEOF     4
+#define VTIME    5
+#define VMIN     6
+#define VSWTC    7
+#define VSTART   8
+#define VSTOP    9
+#define VSUSP    10
+#define VEOL     11
+#define VREPRINT 12
+#define VDISCARD 13
+#define VWERASE  14
+#define VLNEXT   15
+#define VEOL2    16
+
+#define BRKINT 0000002
+#define ICRNL 0000400
+#define IGNBRK 0000001
+#define IGNCR 0000200
+#define IGNPAR 0000004
+#define INLCR 0000100
+#define INPCK 0000020
+#define ISTRIP 0000040
+#define IXANY 0004000
+#define IXOFF 0010000
+#define IXON 0002000
+#define PARMRK 0000010
+
+#define OPOST 0000001
+#define ONLCR 0000004
+#define OCRNL 0000010
+#define ONOCR 0000020
+#define ONLRET 0000040
+#define OFDEL 0000200
+#define OFILL 0000100
+
+#define NLDLY 0000400
+#define NL0 0000000
+#define NL1 0000400
+
+#define CRDLY 0003000
+#define CR0 0000000
+#define CR1 0001000
+#define CR2 0002000
+#define CR3 0003000
+
+#define TABDLY 0014000
+#define TAB0 0000000
+#define TAB1 0004000
+#define TAB2 0010000
+#define TAB3 0014000
+
+#define XTABS 0014000
+#define BSDLY 0020000
+#define BS0 0000000
+#define BS1 0020000
+
+#define VTDLY 0040000
+#define VT0 0000000
+#define VT1 0040000
+
+#define FFDLY 0100000
+#define FF0 0000000
+#define FF1 0100000
+
+#define CSIZE 0000060
+#define CS5 0000000
+#define CS6 0000020
+#define CS7 0000040
+#define CS8 0000060
+
+#define CSTOPB 0000100
+#define CREAD 0000200
+#define PARENB 0000400
+#define PARODD 0001000
+#define HUPCL 0002000
+#define CLOCAL 0004000
+
+#define ECHO 0000010
+#define ECHOE 0000020
+#define ECHOK 0000040
+#define ECHONL 0000100
+#define ICANON 0000002
+#define IEXTEN 0100000
+#define ISIG 0000001
+#define NOFLSH 0000200
+#define TOSTOP 0000400
+
+#define ECHOCTL 0x200
+
+#define CBAUD   0010017
+
+struct termios {
+    tcflag_t c_iflag;
+    tcflag_t c_oflag;
+    tcflag_t c_cflag;
+    tcflag_t c_lflag;
+    cc_t c_line;
+    cc_t c_cc[NCCS];
+    speed_t ibaud;
+    speed_t obaud;
+};
+
+#endif
\ No newline at end of file
diff --git a/abis/hades/uid_t.h b/abis/hades/uid_t.h
new file mode 100644
index 00000000..fd0c8447
--- /dev/null
+++ b/abis/hades/uid_t.h
@@ -0,0 +1,6 @@
+#ifndef _ABIBITS_UID_T_H
+#define _ABIBITS_UID_T_H
+
+typedef long int uid_t;
+
+#endif // _ABIBITS_UID_T_H
\ No newline at end of file
diff --git a/abis/hades/vm-flags.h b/abis/hades/vm-flags.h
new file mode 100644
index 00000000..d84808eb
--- /dev/null
+++ b/abis/hades/vm-flags.h
@@ -0,0 +1,46 @@
+#ifndef _ABIBITS_MMAP_FLAGS_H
+#define _ABIBITS_MMAP_FLAGS_H
+
+#define PROT_NONE  0x00
+#define PROT_READ  0x01
+#define PROT_WRITE 0x02
+#define PROT_EXEC  (1UL << 63)
+
+#define MAP_FAILED ((void *)(-1))
+#define MAP_FILE      0x00
+#define MAP_PRIVATE   0x01
+#define MAP_SHARED    0x02
+#define MAP_FIXED     0x04
+#define MAP_ANON      0x08
+#define MAP_ANONYMOUS 0x08
+#define MAP_NORESERVE 0x10
+#define MAP_FIXED_NOREPLACE 0x20
+
+#define MS_ASYNC 0x01
+#define MS_SYNC 0x02
+#define MS_INVALIDATE 0x04
+
+#define MCL_CURRENT 0x01
+#define MCL_FUTURE 0x02
+
+#define POSIX_MADV_NORMAL 1
+#define POSIX_MADV_SEQUENTIAL 2
+#define POSIX_MADV_RANDOM 3
+#define POSIX_MADV_DONTNEED 4
+#define POSIX_MADV_WILLNEED 5
+
+#define MADV_NORMAL 0
+#define MADV_RANDOM 1
+#define MADV_SEQUENTIAL 2
+#define MADV_WILLNEED 3
+#define MADV_DONTNEED 4
+#define MADV_FREE 8
+
+// Linux extensions:
+#define MREMAP_MAYMOVE 1
+#define MREMAP_FIXED 2
+
+#define MFD_CLOEXEC 1U
+#define MFD_ALLOW_SEALING 2U
+
+#endif // _ABIBITS_MMAP_FLAGS_H
diff --git a/abis/hades/wait.h b/abis/hades/wait.h
new file mode 100644
index 00000000..58d14625
--- /dev/null
+++ b/abis/hades/wait.h
@@ -0,0 +1,28 @@
+#ifndef _ABIBITS_WAIT_H
+#define _ABIBITS_WAIT_H
+
+#define WNOHANG 1
+#define WUNTRACED 2
+#define WSTOPPED 2
+#define WEXITED 4
+#define WCONTINUED 8
+#define WNOWAIT 0x01000000
+
+#define __WALL 0x40000000
+#define __WCLONE 0x80000000
+
+#define WCOREFLAG 0x80
+
+#define WEXITSTATUS(x) (((x) & 0xff00) >> 8)
+#define WTERMSIG(x) ((x) & 0x7f)
+#define WSTOPSIG(x) WEXITSTATUS(x)
+#define WIFEXITED(x) (WTERMSIG(x) == 0)
+#define WIFSIGNALED(x) (((signed char) (((x) & 0x7f) + 1) >> 1) > 0)
+#define WIFSTOPPED(x) (((x) & 0xff) == 0x7f)
+#define WIFCONTINUED(x) ((x) == 0xffff)
+#define WCOREDUMP(x) ((x) & WCOREFLAG)
+
+/* glibc extension, but also useful for kernels */
+#define W_EXITCODE(ret, sig) (((ret) << 8) | (sig))
+
+#endif //_ABIBITS_WAIT_H
diff --git a/meson.build b/meson.build
index 471604e0..8c12f106 100644
--- a/meson.build
+++ b/meson.build
@@ -248,6 +248,11 @@ elif host_machine.system() == 'dripos'
 	rtld_include_dirs += include_directories('sysdeps/dripos/include')
 	libc_include_dirs += include_directories('sysdeps/dripos/include')
 	subdir('sysdeps/dripos')
+elif host_machine.system() == 'hades'
+	disable_linux_option = true
+	rtld_include_dirs += include_directories('sysdeps/hades/include')
+	libc_include_dirs += include_directories('sysdeps/hades/include')
+	subdir('sysdeps/hades')
 else
 	error('No sysdeps defined for OS: ' + host_machine.system())
 endif
@@ -444,10 +449,12 @@ if not headers_only
 		'-fno-stack-protector',
 		'-DMLIBC_BUILDING_RTLD',
 		'-Wno-extern-c-compat',
+        '-D_GNU_SOURCE',
 		'-Wno-unknown-pragmas',
 	]
 
 	libc_cpp_args = [
+        '-D_GNU_SOURCE',
 		'-Wno-unknown-pragmas',
 	]
 
diff --git a/options/rtld/generic/main.cpp b/options/rtld/generic/main.cpp
index 360ed37b..e6ac7a39 100644
--- a/options/rtld/generic/main.cpp
+++ b/options/rtld/generic/main.cpp
@@ -24,9 +24,9 @@
 #define HIDDEN  __attribute__((__visibility__("hidden")))
 #define EXPORT  __attribute__((__visibility__("default")))
 
-static constexpr bool logEntryExit = false;
-static constexpr bool logStartup = false;
-static constexpr bool logDlCalls = false;
+static constexpr bool logEntryExit = true;
+static constexpr bool logStartup = true;
+static constexpr bool logDlCalls = true;
 
 #ifndef MLIBC_STATIC_BUILD
 extern HIDDEN void *_GLOBAL_OFFSET_TABLE_[];
diff --git a/sysdeps/hades/crt-x86_64/crt0.S b/sysdeps/hades/crt-x86_64/crt0.S
new file mode 100644
index 00000000..363a8b51
--- /dev/null
+++ b/sysdeps/hades/crt-x86_64/crt0.S
@@ -0,0 +1,9 @@
+.section .text
+.global _start
+_start:
+    mov %rsp, %rdi
+    lea main(%rip), %rsi
+    call __mlibc_entry
+
+.section .note.GNU-stack,"",%progbits
+
diff --git a/sysdeps/hades/generic/entry.cpp b/sysdeps/hades/generic/entry.cpp
new file mode 100644
index 00000000..6a00e770
--- /dev/null
+++ b/sysdeps/hades/generic/entry.cpp
@@ -0,0 +1,69 @@
+
+#include <stdint.h>
+#include <stdlib.h>
+#include <bits/ensure.h>
+#include <bits/posix/posix_signal.h>
+#include <hades/syscall.h>
+#include <mlibc/all-sysdeps.hpp>
+#include <mlibc/elf/startup.h>
+
+// defined by the POSIX library
+void __mlibc_initLocale();
+
+extern "C" uintptr_t *__dlapi_entrystack();
+extern "C" void __dlapi_enter(uintptr_t *);
+
+extern char **environ;
+static mlibc::exec_stack_data __mlibc_stack_data;
+
+struct LibraryGuard {
+	LibraryGuard();
+};
+
+static LibraryGuard guard;
+
+LibraryGuard::LibraryGuard() {
+	__mlibc_initLocale();
+
+	// Parse the exec() stack.
+	mlibc::parse_exec_stack(__dlapi_entrystack(), &__mlibc_stack_data);
+	mlibc::set_startup_data(__mlibc_stack_data.argc, __mlibc_stack_data.argv,
+			__mlibc_stack_data.envp);
+}
+
+namespace mlibc {
+    void sys_sigenter(void *sigenter) {
+        syscall(SYS_sigenter, sigenter);
+    }
+    
+    [[noreturn]] int sys_sigreturn(ucontext_t *) {
+        syscall(SYS_sigreturn);
+        __builtin_unreachable();
+    }
+}
+
+static void __mlibc_sigentry(void *handler_rip, bool is_sigaction, int sig, siginfo_t *info, ucontext_t *ctx) {
+    if ((uintptr_t) handler_rip == (uintptr_t) SIG_DFL) {
+        mlibc::sys_exit(128 + sig);
+    } else if ((uintptr_t) handler_rip == (uintptr_t) SIG_IGN) {
+
+    } else {
+        if (is_sigaction) {
+            ((void (*)(int, siginfo_t *, void *)) handler_rip)(sig, info, ctx);
+        } else {
+            ((void (*)(int)) handler_rip)(sig);            
+        }
+    }
+
+    mlibc::sys_sigreturn(ctx);
+    __builtin_unreachable();
+}
+
+extern "C" void __mlibc_entry(uintptr_t *entry_stack, int (*main_fn)(int argc, char *argv[], char *env[])) {
+    __dlapi_enter(entry_stack);
+
+    mlibc::sys_sigenter((void *) __mlibc_sigentry);
+	auto result = main_fn(__mlibc_stack_data.argc, __mlibc_stack_data.argv, environ);
+	exit(result);
+}
+
diff --git a/sysdeps/hades/generic/filesystem.cpp b/sysdeps/hades/generic/filesystem.cpp
new file mode 100644
index 00000000..59a5a434
--- /dev/null
+++ b/sysdeps/hades/generic/filesystem.cpp
@@ -0,0 +1,84 @@
+#include <fcntl.h>
+#include <bits/ensure.h>
+#include <mlibc/all-sysdeps.hpp>
+#include <hades/syscall.h>
+#include <mlibc/debug.hpp>
+#include <stdlib.h>
+
+namespace mlibc {
+    int sys_openat(int dirfd, const char *path, int flags, mode_t mode, int *fd) {
+        auto res = syscall(SYS_openat, dirfd, path, flags, mode);
+        if (int err = sc_error(res); err) {
+            return err;
+        }
+
+        *fd = res;
+        return 0;
+    }
+
+    int sys_open(const char *pathname, int flags, mode_t mode, int *fd) {
+        return sys_openat(AT_FDCWD, pathname, flags, mode, fd);
+    }
+
+    int sys_read(int fd, void *buf, size_t count, ssize_t *bytes_read) {
+        auto res = syscall(SYS_read, fd, buf, count);
+        if (int err = sc_error(res); err) {
+            return err;
+        }
+
+        *bytes_read = res;
+        return 0;
+    }
+
+    int sys_write(int fd, const void *buf, size_t count, ssize_t *bytes_written) {
+        auto res = syscall(SYS_write, fd, buf, count);
+        if (int err = sc_error(res); err) {
+            return err;
+        }
+
+        *bytes_written = res;
+        return 0;
+    }
+
+    int sys_seek(int fd, off_t offset, int whence, off_t *new_offset) {
+        auto res = syscall(SYS_write, fd, offset, whence);
+        if (int err = sc_error(res); err) {
+            return err;
+        }
+
+        *new_offset = res;
+        return 0;
+    }
+
+    int sys_close(int fd) {
+        auto res = syscall(SYS_close, fd);
+        if (int err = sc_error(res); err) {
+            return err;
+        }
+
+        return 0;
+    }
+
+    int sys_stat(fsfd_target fsfdt, int fd, const char *path, int flags, struct stat *statbuf) {
+        switch (fsfdt) {
+            case fsfd_target::path:
+                fd = AT_FDCWD;
+                break;
+            case fsfd_target::fd:
+                flags |= AT_EMPTY_PATH;
+                break;
+            case fsfd_target::fd_path:
+                break;
+            default:
+                __ensure(!"Invalid FD target");
+                __builtin_unreachable();
+        }
+
+        auto res = syscall(SYS_lstatat, fd, path, statbuf, flags);
+        if (int err = sc_error(res); err) {
+            return err;
+        }
+
+        return 0;
+    }
+}
\ No newline at end of file
diff --git a/sysdeps/hades/generic/generic.cpp b/sysdeps/hades/generic/generic.cpp
new file mode 100644
index 00000000..e55676ce
--- /dev/null
+++ b/sysdeps/hades/generic/generic.cpp
@@ -0,0 +1,188 @@
+#include <fcntl.h>
+#include <stdint.h>
+#include <bits/ensure.h>
+#include <mlibc/all-sysdeps.hpp>
+#include <hades/syscall.h>
+#include <mlibc/debug.hpp>
+#include <stdint.h>
+#include <stdlib.h>
+
+namespace mlibc {
+    void sys_libc_log(const char *message) {
+        syscall(SYS_user_log, message);
+    }
+
+    void sys_libc_panic() {
+        mlibc::infoLogger() << "PANIC!" << frg::endlog;
+        __builtin_unreachable();
+    }
+
+    int sys_tcb_set(void *pointer) {
+        syscall(SYS_set_fs_base, pointer);
+        return 0;
+    }
+
+    void sys_exit(int status) {
+        syscall(SYS_exit, status);
+        __builtin_unreachable();
+    }
+
+    int sys_fork(pid_t *child) {
+        uintptr_t res = syscall(SYS_fork);
+        if (int err = sc_error(res); err) {
+            return err;
+        }
+
+        *child = res;
+        return 0;
+    }
+
+    int sys_execve(const char *path, char *const *argv, char *const *envp) {
+        uintptr_t res = syscall(SYS_exec, path, argv, envp);
+        if (int err = sc_error(res); err) {
+            return err;
+        }
+
+        __builtin_unreachable();
+    }
+
+    int sys_futex_wait(int *pointer, int expected, const struct timespec *time) {
+        int res = syscall(SYS_futex, pointer, 0, expected, time);
+        if (int err = sc_error(res); err) {
+            return err;
+        }
+
+        return 0;
+    }
+
+    int sys_futex_wake(int *pointer) {
+        int res = syscall(SYS_futex, pointer, 1, 0, NULL);
+        if (int err = sc_error(res); err) {
+            return err;
+        }
+
+        return 0;
+    }
+    
+    int sys_waitpid(pid_t pid, int *status, int flags, struct rusage *ru, pid_t *ret_pid) {
+        (void) ru;
+
+        uintptr_t res = syscall(SYS_waitpid, pid, status, flags);
+        if (int err = sc_error(res); err) {
+            return err;
+        }
+
+        *ret_pid = res;
+        return 0;
+    }
+
+    int sys_vm_map(void *hint, size_t size, int prot, int flags, int fd, off_t offset, void **window) {
+        uintptr_t addr = syscall(SYS_mmap, (uintptr_t) hint, size, prot, flags, fd, offset);
+        if (int err = sc_error(addr); err) {
+            return err;
+        }
+
+        *window = (void *) addr;
+        return 0;
+    }
+
+    int sys_vm_unmap(void *pointer, size_t size) {
+        uintptr_t addr = syscall(SYS_munmap, (uintptr_t) pointer, size);
+        if (int err = sc_error(addr); err) {
+            return err;
+        }
+
+        return 0;
+    }
+
+    int sys_vm_protect(void *pointer, size_t size, int prot) {
+	    mlibc::infoLogger() << "mlibc: sys_vm_protect(" << pointer << ", "
+			    << size << ", " << prot << "); stub!\n"
+			    << frg::endlog;
+        return 0;
+    }
+
+    int sys_anon_allocate(size_t size, void **pointer) {
+        return sys_vm_map(NULL, size, PROT_READ | PROT_WRITE, MAP_ANONYMOUS, -1, 0, pointer);
+    }
+
+    int sys_anon_free(void *pointer, size_t size) {
+        return sys_vm_unmap(pointer, size);
+    }
+
+    pid_t sys_getpid() {
+        return syscall(SYS_getpid);
+    }
+
+    pid_t sys_getppid() {
+        return syscall(SYS_getppid);
+    }
+
+    uid_t sys_getuid() {
+        return 0;
+    }
+
+    uid_t sys_geteuid() {
+        return 0;
+    }
+
+    gid_t sys_getgid() {
+        return 0;
+    }
+
+    int sys_setgid(gid_t gid) {
+        return 0;
+    }
+
+    int sys_getsid(pid_t pid, pid_t *sid) {
+        auto res = syscall(SYS_getsid, pid);
+        if (int err = sc_error(res); err) {
+            return err;
+        }
+
+        *sid = (pid_t) res;
+        return 0;
+    }
+
+    gid_t sys_getegid() {
+        mlibc::infoLogger() << "mlibc: " << __func__ << " is a stub!\n"
+                    << frg::endlog;
+        return 0;
+    }
+
+    int sys_getpgid(pid_t pid, pid_t *pgid) {
+        auto res = syscall(SYS_getpgid, pid);
+        if (int err = sc_error(res); err) {
+            return err;
+        }
+
+        *pgid = (pid_t) res;
+        return 0;
+    }
+
+    int sys_setpgid(pid_t pid, pid_t pgid) {
+        auto res = syscall(SYS_setpgid, pid, pgid);
+        if (int err = sc_error(res); err) {
+            return err;
+        }
+
+        return 0;
+    }
+
+    int sys_setsid(pid_t *sid) {
+        auto res = syscall(SYS_setsid);
+        if (int err =sc_error(res); err) {
+            return err;
+        }
+
+        *sid = (pid_t) res;
+        return 0;
+    }
+
+    int sys_clock_get(int clock, time_t *secs, long *nanos) {
+        auto res = syscall(SYS_clock_get, clock);
+        *secs = res / 1000000000;
+        *nanos = res % 1000000000;
+        return 0;
+    }
+}
\ No newline at end of file
diff --git a/sysdeps/hades/generic/signals.S b/sysdeps/hades/generic/signals.S
new file mode 100644
index 00000000..e56f55ed
--- /dev/null
+++ b/sysdeps/hades/generic/signals.S
@@ -0,0 +1,9 @@
+.section .text
+.global __mlibc_signal_restore
+
+__mlibc_signal_restore:
+    mov $50, %rax
+    syscall
+    ud2
+
+.section .note.GNU-stack,"",%progbits
\ No newline at end of file
diff --git a/sysdeps/hades/generic/signals.cpp b/sysdeps/hades/generic/signals.cpp
new file mode 100644
index 00000000..3455b424
--- /dev/null
+++ b/sysdeps/hades/generic/signals.cpp
@@ -0,0 +1,59 @@
+#include <bits/ensure.h>
+#include <mlibc/all-sysdeps.hpp>
+#include <hades/syscall.h>
+#include <sys/types.h>
+
+extern "C" void __mlibc_signal_restore();
+namespace mlibc {
+    int sys_sigaction(int sig, const struct sigaction *__restrict action, struct sigaction *__restrict old_action) {
+        struct sigaction kernel_act;
+        struct sigaction kernel_old;
+
+        if (action) {
+            kernel_act.sa_handler = action->sa_handler;
+            kernel_act.sa_mask = action->sa_mask;
+            kernel_act.sa_flags = action->sa_flags;
+            kernel_act.sa_restorer = __mlibc_signal_restore;
+        }
+
+        auto res = syscall(SYS_sigaction, sig, &kernel_act, &kernel_old);
+        if (int err = sc_error(res); err) {
+            return err;
+        }
+
+        if (old_action) {
+            old_action->sa_handler = kernel_old.sa_handler;
+            old_action->sa_mask = kernel_old.sa_mask;
+            old_action->sa_flags = kernel_old.sa_flags;
+            old_action->sa_restorer = kernel_old.sa_restorer;
+        }
+
+        return 0;
+    }
+
+    int sys_sigpending(sigset_t *set) {
+        auto res = syscall(SYS_sigpending, set);
+        if (int err = sc_error(res); err) {
+            return err;
+        }
+
+        return 0;
+    }
+
+    int sys_sigprocmask(int how, const sigset_t *__restrict set, sigset_t *__restrict retrieve) {
+        auto res = syscall(SYS_sigprocmask, how, set, retrieve);
+        return sc_error(res);
+    }
+
+    int sys_sigsuspend(const sigset_t *set) {
+        auto res = syscall(SYS_sigsuspend, set);
+        return sc_error(res);
+    }
+
+    int sys_kill(int pid, int sig) {
+        if (sig == 0) return 0;
+
+        auto res = syscall(pid, sig);
+        return sc_error(res);
+    }
+}
\ No newline at end of file
diff --git a/sysdeps/hades/include/abi-bits/access.h b/sysdeps/hades/include/abi-bits/access.h
new file mode 120000
index 00000000..f420ee1f
--- /dev/null
+++ b/sysdeps/hades/include/abi-bits/access.h
@@ -0,0 +1 @@
+/home/racemus/projects/hades/user/mlibc/abis/mlibc/access.h
\ No newline at end of file
diff --git a/sysdeps/hades/include/abi-bits/auxv.h b/sysdeps/hades/include/abi-bits/auxv.h
new file mode 120000
index 00000000..e18b2cab
--- /dev/null
+++ b/sysdeps/hades/include/abi-bits/auxv.h
@@ -0,0 +1 @@
+/home/racemus/projects/hades/user/mlibc/abis/hades/auxv.h
\ No newline at end of file
diff --git a/sysdeps/hades/include/abi-bits/blkcnt_t.h b/sysdeps/hades/include/abi-bits/blkcnt_t.h
new file mode 120000
index 00000000..2243e207
--- /dev/null
+++ b/sysdeps/hades/include/abi-bits/blkcnt_t.h
@@ -0,0 +1 @@
+/home/racemus/projects/hades/user/mlibc/abis/mlibc/blkcnt_t.h
\ No newline at end of file
diff --git a/sysdeps/hades/include/abi-bits/blksize_t.h b/sysdeps/hades/include/abi-bits/blksize_t.h
new file mode 120000
index 00000000..a3570402
--- /dev/null
+++ b/sysdeps/hades/include/abi-bits/blksize_t.h
@@ -0,0 +1 @@
+/home/racemus/projects/hades/user/mlibc/abis/mlibc/blksize_t.h
\ No newline at end of file
diff --git a/sysdeps/hades/include/abi-bits/clockid_t.h b/sysdeps/hades/include/abi-bits/clockid_t.h
new file mode 120000
index 00000000..72f4c22f
--- /dev/null
+++ b/sysdeps/hades/include/abi-bits/clockid_t.h
@@ -0,0 +1 @@
+/home/racemus/projects/hades/user/mlibc/abis/mlibc/clockid_t.h
\ No newline at end of file
diff --git a/sysdeps/hades/include/abi-bits/dev_t.h b/sysdeps/hades/include/abi-bits/dev_t.h
new file mode 120000
index 00000000..27dc6574
--- /dev/null
+++ b/sysdeps/hades/include/abi-bits/dev_t.h
@@ -0,0 +1 @@
+/home/racemus/projects/hades/user/mlibc/abis/mlibc/dev_t.h
\ No newline at end of file
diff --git a/sysdeps/hades/include/abi-bits/epoll.h b/sysdeps/hades/include/abi-bits/epoll.h
new file mode 120000
index 00000000..b6803a16
--- /dev/null
+++ b/sysdeps/hades/include/abi-bits/epoll.h
@@ -0,0 +1 @@
+/home/racemus/projects/hades/user/mlibc/abis/mlibc/epoll.h
\ No newline at end of file
diff --git a/sysdeps/hades/include/abi-bits/errno.h b/sysdeps/hades/include/abi-bits/errno.h
new file mode 120000
index 00000000..a602e8ab
--- /dev/null
+++ b/sysdeps/hades/include/abi-bits/errno.h
@@ -0,0 +1 @@
+/home/racemus/projects/hades/user/mlibc/abis/hades/errno.h
\ No newline at end of file
diff --git a/sysdeps/hades/include/abi-bits/fcntl.h b/sysdeps/hades/include/abi-bits/fcntl.h
new file mode 120000
index 00000000..f4151583
--- /dev/null
+++ b/sysdeps/hades/include/abi-bits/fcntl.h
@@ -0,0 +1 @@
+/home/racemus/projects/hades/user/mlibc/abis/mlibc/fcntl.h
\ No newline at end of file
diff --git a/sysdeps/hades/include/abi-bits/fsblkcnt_t.h b/sysdeps/hades/include/abi-bits/fsblkcnt_t.h
new file mode 120000
index 00000000..ceaf9c33
--- /dev/null
+++ b/sysdeps/hades/include/abi-bits/fsblkcnt_t.h
@@ -0,0 +1 @@
+/home/racemus/projects/hades/user/mlibc/abis/linux/fsblkcnt_t.h
\ No newline at end of file
diff --git a/sysdeps/hades/include/abi-bits/fsfilcnt_t.h b/sysdeps/hades/include/abi-bits/fsfilcnt_t.h
new file mode 120000
index 00000000..ae941f37
--- /dev/null
+++ b/sysdeps/hades/include/abi-bits/fsfilcnt_t.h
@@ -0,0 +1 @@
+/home/racemus/projects/hades/user/mlibc/abis/linux/fsfilcnt_t.h
\ No newline at end of file
diff --git a/sysdeps/hades/include/abi-bits/gid_t.h b/sysdeps/hades/include/abi-bits/gid_t.h
new file mode 120000
index 00000000..1de4e547
--- /dev/null
+++ b/sysdeps/hades/include/abi-bits/gid_t.h
@@ -0,0 +1 @@
+/home/racemus/projects/hades/user/mlibc/abis/hades/gid_t.h
\ No newline at end of file
diff --git a/sysdeps/hades/include/abi-bits/in.h b/sysdeps/hades/include/abi-bits/in.h
new file mode 120000
index 00000000..01143bbe
--- /dev/null
+++ b/sysdeps/hades/include/abi-bits/in.h
@@ -0,0 +1 @@
+/home/racemus/projects/hades/user/mlibc/abis/mlibc/in.h
\ No newline at end of file
diff --git a/sysdeps/hades/include/abi-bits/ino_t.h b/sysdeps/hades/include/abi-bits/ino_t.h
new file mode 120000
index 00000000..ac5155ec
--- /dev/null
+++ b/sysdeps/hades/include/abi-bits/ino_t.h
@@ -0,0 +1 @@
+/home/racemus/projects/hades/user/mlibc/abis/hades/ino_t.h
\ No newline at end of file
diff --git a/sysdeps/hades/include/abi-bits/inotify.h b/sysdeps/hades/include/abi-bits/inotify.h
new file mode 120000
index 00000000..87bbc113
--- /dev/null
+++ b/sysdeps/hades/include/abi-bits/inotify.h
@@ -0,0 +1 @@
+/home/racemus/projects/hades/user/mlibc/abis/linux/inotify.h
\ No newline at end of file
diff --git a/sysdeps/hades/include/abi-bits/ioctls.h b/sysdeps/hades/include/abi-bits/ioctls.h
new file mode 120000
index 00000000..e4048a60
--- /dev/null
+++ b/sysdeps/hades/include/abi-bits/ioctls.h
@@ -0,0 +1 @@
+/home/racemus/projects/hades/user/mlibc/abis/linux/ioctls.h
\ No newline at end of file
diff --git a/sysdeps/hades/include/abi-bits/limits.h b/sysdeps/hades/include/abi-bits/limits.h
new file mode 120000
index 00000000..42d8423c
--- /dev/null
+++ b/sysdeps/hades/include/abi-bits/limits.h
@@ -0,0 +1 @@
+/home/racemus/projects/hades/user/mlibc/abis/mlibc/limits.h
\ No newline at end of file
diff --git a/sysdeps/hades/include/abi-bits/mode_t.h b/sysdeps/hades/include/abi-bits/mode_t.h
new file mode 120000
index 00000000..7dde412d
--- /dev/null
+++ b/sysdeps/hades/include/abi-bits/mode_t.h
@@ -0,0 +1 @@
+/home/racemus/projects/hades/user/mlibc/abis/hades/mode_t.h
\ No newline at end of file
diff --git a/sysdeps/hades/include/abi-bits/mqueue.h b/sysdeps/hades/include/abi-bits/mqueue.h
new file mode 120000
index 00000000..67069c02
--- /dev/null
+++ b/sysdeps/hades/include/abi-bits/mqueue.h
@@ -0,0 +1 @@
+/home/racemus/projects/hades/user/mlibc/abis/linux/mqueue.h
\ No newline at end of file
diff --git a/sysdeps/hades/include/abi-bits/msg.h b/sysdeps/hades/include/abi-bits/msg.h
new file mode 120000
index 00000000..74bb2462
--- /dev/null
+++ b/sysdeps/hades/include/abi-bits/msg.h
@@ -0,0 +1 @@
+/home/racemus/projects/hades/user/mlibc/abis/linux/msg.h
\ No newline at end of file
diff --git a/sysdeps/hades/include/abi-bits/nlink_t.h b/sysdeps/hades/include/abi-bits/nlink_t.h
new file mode 120000
index 00000000..d5640f15
--- /dev/null
+++ b/sysdeps/hades/include/abi-bits/nlink_t.h
@@ -0,0 +1 @@
+/home/racemus/projects/hades/user/mlibc/abis/hades/nlink_t.h
\ No newline at end of file
diff --git a/sysdeps/hades/include/abi-bits/packet.h b/sysdeps/hades/include/abi-bits/packet.h
new file mode 120000
index 00000000..3e604332
--- /dev/null
+++ b/sysdeps/hades/include/abi-bits/packet.h
@@ -0,0 +1 @@
+/home/racemus/projects/hades/user/mlibc/abis/linux/packet.h
\ No newline at end of file
diff --git a/sysdeps/hades/include/abi-bits/pid_t.h b/sysdeps/hades/include/abi-bits/pid_t.h
new file mode 120000
index 00000000..c2d21a07
--- /dev/null
+++ b/sysdeps/hades/include/abi-bits/pid_t.h
@@ -0,0 +1 @@
+/home/racemus/projects/hades/user/mlibc/abis/hades/pid_t.h
\ No newline at end of file
diff --git a/sysdeps/hades/include/abi-bits/poll.h b/sysdeps/hades/include/abi-bits/poll.h
new file mode 120000
index 00000000..b3c51d17
--- /dev/null
+++ b/sysdeps/hades/include/abi-bits/poll.h
@@ -0,0 +1 @@
+/home/racemus/projects/hades/user/mlibc/abis/mlibc/poll.h
\ No newline at end of file
diff --git a/sysdeps/hades/include/abi-bits/ptrace.h b/sysdeps/hades/include/abi-bits/ptrace.h
new file mode 120000
index 00000000..bd031dc5
--- /dev/null
+++ b/sysdeps/hades/include/abi-bits/ptrace.h
@@ -0,0 +1 @@
+/home/racemus/projects/hades/user/mlibc/abis/mlibc/ptrace.h
\ No newline at end of file
diff --git a/sysdeps/hades/include/abi-bits/resource.h b/sysdeps/hades/include/abi-bits/resource.h
new file mode 120000
index 00000000..2f3f4954
--- /dev/null
+++ b/sysdeps/hades/include/abi-bits/resource.h
@@ -0,0 +1 @@
+/home/racemus/projects/hades/user/mlibc/abis/mlibc/resource.h
\ No newline at end of file
diff --git a/sysdeps/hades/include/abi-bits/seek-whence.h b/sysdeps/hades/include/abi-bits/seek-whence.h
new file mode 120000
index 00000000..5e665695
--- /dev/null
+++ b/sysdeps/hades/include/abi-bits/seek-whence.h
@@ -0,0 +1 @@
+/home/racemus/projects/hades/user/mlibc/abis/hades/seek-whence.h
\ No newline at end of file
diff --git a/sysdeps/hades/include/abi-bits/shm.h b/sysdeps/hades/include/abi-bits/shm.h
new file mode 120000
index 00000000..378066f8
--- /dev/null
+++ b/sysdeps/hades/include/abi-bits/shm.h
@@ -0,0 +1 @@
+/home/racemus/projects/hades/user/mlibc/abis/linux/shm.h
\ No newline at end of file
diff --git a/sysdeps/hades/include/abi-bits/signal.h b/sysdeps/hades/include/abi-bits/signal.h
new file mode 120000
index 00000000..e43d5a07
--- /dev/null
+++ b/sysdeps/hades/include/abi-bits/signal.h
@@ -0,0 +1 @@
+/home/racemus/projects/hades/user/mlibc/abis/hades/signal.h
\ No newline at end of file
diff --git a/sysdeps/hades/include/abi-bits/socket.h b/sysdeps/hades/include/abi-bits/socket.h
new file mode 120000
index 00000000..1e099deb
--- /dev/null
+++ b/sysdeps/hades/include/abi-bits/socket.h
@@ -0,0 +1 @@
+/home/racemus/projects/hades/user/mlibc/abis/mlibc/socket.h
\ No newline at end of file
diff --git a/sysdeps/hades/include/abi-bits/socklen_t.h b/sysdeps/hades/include/abi-bits/socklen_t.h
new file mode 120000
index 00000000..52513628
--- /dev/null
+++ b/sysdeps/hades/include/abi-bits/socklen_t.h
@@ -0,0 +1 @@
+/home/racemus/projects/hades/user/mlibc/abis/linux/socklen_t.h
\ No newline at end of file
diff --git a/sysdeps/hades/include/abi-bits/stat.h b/sysdeps/hades/include/abi-bits/stat.h
new file mode 120000
index 00000000..9b4f1d12
--- /dev/null
+++ b/sysdeps/hades/include/abi-bits/stat.h
@@ -0,0 +1 @@
+/home/racemus/projects/hades/user/mlibc/abis/mlibc/stat.h
\ No newline at end of file
diff --git a/sysdeps/hades/include/abi-bits/statfs.h b/sysdeps/hades/include/abi-bits/statfs.h
new file mode 120000
index 00000000..0db9a9b0
--- /dev/null
+++ b/sysdeps/hades/include/abi-bits/statfs.h
@@ -0,0 +1 @@
+/home/racemus/projects/hades/user/mlibc/abis/linux/statfs.h
\ No newline at end of file
diff --git a/sysdeps/hades/include/abi-bits/statvfs.h b/sysdeps/hades/include/abi-bits/statvfs.h
new file mode 120000
index 00000000..47ff0a66
--- /dev/null
+++ b/sysdeps/hades/include/abi-bits/statvfs.h
@@ -0,0 +1 @@
+/home/racemus/projects/hades/user/mlibc/abis/linux/statvfs.h
\ No newline at end of file
diff --git a/sysdeps/hades/include/abi-bits/statx.h b/sysdeps/hades/include/abi-bits/statx.h
new file mode 120000
index 00000000..f0271b52
--- /dev/null
+++ b/sysdeps/hades/include/abi-bits/statx.h
@@ -0,0 +1 @@
+/home/racemus/projects/hades/user/mlibc/abis/linux/statx.h
\ No newline at end of file
diff --git a/sysdeps/hades/include/abi-bits/suseconds_t.h b/sysdeps/hades/include/abi-bits/suseconds_t.h
new file mode 120000
index 00000000..1787d630
--- /dev/null
+++ b/sysdeps/hades/include/abi-bits/suseconds_t.h
@@ -0,0 +1 @@
+/home/racemus/projects/hades/user/mlibc/abis/linux/suseconds_t.h
\ No newline at end of file
diff --git a/sysdeps/hades/include/abi-bits/termios.h b/sysdeps/hades/include/abi-bits/termios.h
new file mode 120000
index 00000000..084ea894
--- /dev/null
+++ b/sysdeps/hades/include/abi-bits/termios.h
@@ -0,0 +1 @@
+/home/racemus/projects/hades/user/mlibc/abis/hades/termios.h
\ No newline at end of file
diff --git a/sysdeps/hades/include/abi-bits/time.h b/sysdeps/hades/include/abi-bits/time.h
new file mode 120000
index 00000000..7cef14ae
--- /dev/null
+++ b/sysdeps/hades/include/abi-bits/time.h
@@ -0,0 +1 @@
+/home/racemus/projects/hades/user/mlibc/abis/mlibc/time.h
\ No newline at end of file
diff --git a/sysdeps/hades/include/abi-bits/uid_t.h b/sysdeps/hades/include/abi-bits/uid_t.h
new file mode 120000
index 00000000..79456cbe
--- /dev/null
+++ b/sysdeps/hades/include/abi-bits/uid_t.h
@@ -0,0 +1 @@
+/home/racemus/projects/hades/user/mlibc/abis/hades/uid_t.h
\ No newline at end of file
diff --git a/sysdeps/hades/include/abi-bits/utsname.h b/sysdeps/hades/include/abi-bits/utsname.h
new file mode 120000
index 00000000..b4d2e354
--- /dev/null
+++ b/sysdeps/hades/include/abi-bits/utsname.h
@@ -0,0 +1 @@
+/home/racemus/projects/hades/user/mlibc/abis/linux/utsname.h
\ No newline at end of file
diff --git a/sysdeps/hades/include/abi-bits/vm-flags.h b/sysdeps/hades/include/abi-bits/vm-flags.h
new file mode 120000
index 00000000..7557a195
--- /dev/null
+++ b/sysdeps/hades/include/abi-bits/vm-flags.h
@@ -0,0 +1 @@
+/home/racemus/projects/hades/user/mlibc/abis/hades/vm-flags.h
\ No newline at end of file
diff --git a/sysdeps/hades/include/abi-bits/wait.h b/sysdeps/hades/include/abi-bits/wait.h
new file mode 120000
index 00000000..c4b4cc47
--- /dev/null
+++ b/sysdeps/hades/include/abi-bits/wait.h
@@ -0,0 +1 @@
+/home/racemus/projects/hades/user/mlibc/abis/hades/wait.h
\ No newline at end of file
diff --git a/sysdeps/hades/include/abi-bits/xattr.h b/sysdeps/hades/include/abi-bits/xattr.h
new file mode 120000
index 00000000..79e4aaf6
--- /dev/null
+++ b/sysdeps/hades/include/abi-bits/xattr.h
@@ -0,0 +1 @@
+/home/racemus/projects/hades/user/mlibc/abis/linux/xattr.h
\ No newline at end of file
diff --git a/sysdeps/hades/include/asm/ioctl.h b/sysdeps/hades/include/asm/ioctl.h
new file mode 100644
index 00000000..8cbb3645
--- /dev/null
+++ b/sysdeps/hades/include/asm/ioctl.h
@@ -0,0 +1,105 @@
+/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */
+#ifndef _ASM_GENERIC_IOCTL_H
+#define _ASM_GENERIC_IOCTL_H
+
+/* ioctl command encoding: 32 bits total, command in lower 16 bits,
+ * size of the parameter structure in the lower 14 bits of the
+ * upper 16 bits.
+ * Encoding the size of the parameter structure in the ioctl request
+ * is useful for catching programs compiled with old versions
+ * and to avoid overwriting user space outside the user buffer area.
+ * The highest 2 bits are reserved for indicating the ``access mode''.
+ * NOTE: This limits the max parameter size to 16kB -1 !
+ */
+
+/*
+ * The following is for compatibility across the various Linux
+ * platforms.  The generic ioctl numbering scheme doesn't really enforce
+ * a type field.  De facto, however, the top 8 bits of the lower 16
+ * bits are indeed used as a type field, so we might just as well make
+ * this explicit here.  Please be sure to use the decoding macros
+ * below from now on.
+ */
+#define _IOC_NRBITS	8
+#define _IOC_TYPEBITS	8
+
+/*
+ * Let any architecture override either of the following before
+ * including this file.
+ */
+
+#ifndef _IOC_SIZEBITS
+# define _IOC_SIZEBITS	14
+#endif
+
+#ifndef _IOC_DIRBITS
+# define _IOC_DIRBITS	2
+#endif
+
+#define _IOC_NRMASK	((1 << _IOC_NRBITS)-1)
+#define _IOC_TYPEMASK	((1 << _IOC_TYPEBITS)-1)
+#define _IOC_SIZEMASK	((1 << _IOC_SIZEBITS)-1)
+#define _IOC_DIRMASK	((1 << _IOC_DIRBITS)-1)
+
+#define _IOC_NRSHIFT	0
+#define _IOC_TYPESHIFT	(_IOC_NRSHIFT+_IOC_NRBITS)
+#define _IOC_SIZESHIFT	(_IOC_TYPESHIFT+_IOC_TYPEBITS)
+#define _IOC_DIRSHIFT	(_IOC_SIZESHIFT+_IOC_SIZEBITS)
+
+/*
+ * Direction bits, which any architecture can choose to override
+ * before including this file.
+ *
+ * NOTE: _IOC_WRITE means userland is writing and kernel is
+ * reading. _IOC_READ means userland is reading and kernel is writing.
+ */
+
+#ifndef _IOC_NONE
+# define _IOC_NONE	0U
+#endif
+
+#ifndef _IOC_WRITE
+# define _IOC_WRITE	1U
+#endif
+
+#ifndef _IOC_READ
+# define _IOC_READ	2U
+#endif
+
+#define _IOC(dir,type,nr,size) \
+	(((dir)  << _IOC_DIRSHIFT) | \
+	 ((type) << _IOC_TYPESHIFT) | \
+	 ((nr)   << _IOC_NRSHIFT) | \
+	 ((size) << _IOC_SIZESHIFT))
+
+#define _IOC_TYPECHECK(t) (sizeof(t))
+
+/*
+ * Used to create numbers.
+ *
+ * NOTE: _IOW means userland is writing and kernel is reading. _IOR
+ * means userland is reading and kernel is writing.
+ */
+#define _IO(type,nr)		_IOC(_IOC_NONE,(type),(nr),0)
+#define _IOR(type,nr,size)	_IOC(_IOC_READ,(type),(nr),(_IOC_TYPECHECK(size)))
+#define _IOW(type,nr,size)	_IOC(_IOC_WRITE,(type),(nr),(_IOC_TYPECHECK(size)))
+#define _IOWR(type,nr,size)	_IOC(_IOC_READ|_IOC_WRITE,(type),(nr),(_IOC_TYPECHECK(size)))
+#define _IOR_BAD(type,nr,size)	_IOC(_IOC_READ,(type),(nr),sizeof(size))
+#define _IOW_BAD(type,nr,size)	_IOC(_IOC_WRITE,(type),(nr),sizeof(size))
+#define _IOWR_BAD(type,nr,size)	_IOC(_IOC_READ|_IOC_WRITE,(type),(nr),sizeof(size))
+
+/* used to decode ioctl numbers.. */
+#define _IOC_DIR(nr)		(((nr) >> _IOC_DIRSHIFT) & _IOC_DIRMASK)
+#define _IOC_TYPE(nr)		(((nr) >> _IOC_TYPESHIFT) & _IOC_TYPEMASK)
+#define _IOC_NR(nr)		(((nr) >> _IOC_NRSHIFT) & _IOC_NRMASK)
+#define _IOC_SIZE(nr)		(((nr) >> _IOC_SIZESHIFT) & _IOC_SIZEMASK)
+
+/* ...and for the drivers/sound files... */
+
+#define IOC_IN		(_IOC_WRITE << _IOC_DIRSHIFT)
+#define IOC_OUT		(_IOC_READ << _IOC_DIRSHIFT)
+#define IOC_INOUT	((_IOC_WRITE|_IOC_READ) << _IOC_DIRSHIFT)
+#define IOCSIZE_MASK	(_IOC_SIZEMASK << _IOC_SIZESHIFT)
+#define IOCSIZE_SHIFT	(_IOC_SIZESHIFT)
+
+#endif /* _ASM_GENERIC_IOCTL_H */
diff --git a/sysdeps/hades/include/asm/ioctls.h b/sysdeps/hades/include/asm/ioctls.h
new file mode 100644
index 00000000..bdbba9bf
--- /dev/null
+++ b/sysdeps/hades/include/asm/ioctls.h
@@ -0,0 +1,121 @@
+/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */
+#ifndef __ASM_GENERIC_IOCTLS_H
+#define __ASM_GENERIC_IOCTLS_H
+
+#include <asm/ioctl.h>
+
+/*
+ * These are the most common definitions for tty ioctl numbers.
+ * Most of them do not use the recommended _IOC(), but there is
+ * probably some source code out there hardcoding the number,
+ * so we might as well use them for all new platforms.
+ *
+ * The architectures that use different values here typically
+ * try to be compatible with some Unix variants for the same
+ * architecture.
+ */
+
+/* 0x54 is just a magic number to make these relatively unique ('T') */
+
+#define TCGETS		0x5401
+#define TCSETS		0x5402
+#define TCSETSW		0x5403
+#define TCSETSF		0x5404
+#define TCGETA		0x5405
+#define TCSETA		0x5406
+#define TCSETAW		0x5407
+#define TCSETAF		0x5408
+#define TCSBRK		0x5409
+#define TCXONC		0x540A
+#define TCFLSH		0x540B
+#define TIOCEXCL	0x540C
+#define TIOCNXCL	0x540D
+#define TIOCSCTTY	0x540E
+#define TIOCGPGRP	0x540F
+#define TIOCSPGRP	0x5410
+#define TIOCOUTQ	0x5411
+#define TIOCSTI		0x5412
+#define TIOCGWINSZ	0x5413
+#define TIOCSWINSZ	0x5414
+#define TIOCMGET	0x5415
+#define TIOCMBIS	0x5416
+#define TIOCMBIC	0x5417
+#define TIOCMSET	0x5418
+#define TIOCGSOFTCAR	0x5419
+#define TIOCSSOFTCAR	0x541A
+#define FIONREAD	0x541B
+#define TIOCINQ		FIONREAD
+#define TIOCLINUX	0x541C
+#define TIOCCONS	0x541D
+#define TIOCGSERIAL	0x541E
+#define TIOCSSERIAL	0x541F
+#define TIOCPKT		0x5420
+#define FIONBIO		0x5421
+#define TIOCNOTTY	0x5422
+#define TIOCSETD	0x5423
+#define TIOCGETD	0x5424
+#define TCSBRKP		0x5425	/* Needed for POSIX tcsendbreak() */
+#define TIOCSBRK	0x5427  /* BSD compatibility */
+#define TIOCCBRK	0x5428  /* BSD compatibility */
+#define TIOCGSID	0x5429  /* Return the session ID of FD */
+#define TCGETS2		_IOR('T', 0x2A, struct termios2)
+#define TCSETS2		_IOW('T', 0x2B, struct termios2)
+#define TCSETSW2	_IOW('T', 0x2C, struct termios2)
+#define TCSETSF2	_IOW('T', 0x2D, struct termios2)
+#define TIOCGRS485	0x542E
+#ifndef TIOCSRS485
+#define TIOCSRS485	0x542F
+#endif
+#define TIOCGPTN	_IOR('T', 0x30, unsigned int) /* Get Pty Number (of pty-mux device) */
+#define TIOCSPTLCK	_IOW('T', 0x31, int)  /* Lock/unlock Pty */
+#define TIOCGDEV	_IOR('T', 0x32, unsigned int) /* Get primary device node of /dev/console */
+#define TCGETX		0x5432 /* SYS5 TCGETX compatibility */
+#define TCSETX		0x5433
+#define TCSETXF		0x5434
+#define TCSETXW		0x5435
+#define TIOCSIG		_IOW('T', 0x36, int)  /* pty: generate signal */
+#define TIOCVHANGUP	0x5437
+#define TIOCGPKT	_IOR('T', 0x38, int) /* Get packet mode state */
+#define TIOCGPTLCK	_IOR('T', 0x39, int) /* Get Pty lock state */
+#define TIOCGEXCL	_IOR('T', 0x40, int) /* Get exclusive mode state */
+#define TIOCGPTPEER	_IO('T', 0x41) /* Safely open the slave */
+#define TIOCGISO7816	_IOR('T', 0x42, struct serial_iso7816)
+#define TIOCSISO7816	_IOWR('T', 0x43, struct serial_iso7816)
+
+#define FIONCLEX	0x5450
+#define FIOCLEX		0x5451
+#define FIOASYNC	0x5452
+#define TIOCSERCONFIG	0x5453
+#define TIOCSERGWILD	0x5454
+#define TIOCSERSWILD	0x5455
+#define TIOCGLCKTRMIOS	0x5456
+#define TIOCSLCKTRMIOS	0x5457
+#define TIOCSERGSTRUCT	0x5458 /* For debugging only */
+#define TIOCSERGETLSR   0x5459 /* Get line status register */
+#define TIOCSERGETMULTI 0x545A /* Get multiport config  */
+#define TIOCSERSETMULTI 0x545B /* Set multiport config */
+
+#define TIOCMIWAIT	0x545C	/* wait for a change on serial input line(s) */
+#define TIOCGICOUNT	0x545D	/* read serial port __inline__ interrupt counts */
+
+/*
+ * Some arches already define FIOQSIZE due to a historical
+ * conflict with a Hayes modem-specific ioctl value.
+ */
+#ifndef FIOQSIZE
+# define FIOQSIZE	0x5460
+#endif
+
+/* Used for packet mode */
+#define TIOCPKT_DATA		 0
+#define TIOCPKT_FLUSHREAD	 1
+#define TIOCPKT_FLUSHWRITE	 2
+#define TIOCPKT_STOP		 4
+#define TIOCPKT_START		 8
+#define TIOCPKT_NOSTOP		16
+#define TIOCPKT_DOSTOP		32
+#define TIOCPKT_IOCTL		64
+
+#define TIOCSER_TEMT	0x01	/* Transmitter physically empty */
+
+#endif /* __ASM_GENERIC_IOCTLS_H */
diff --git a/sysdeps/hades/include/hades/syscall.h b/sysdeps/hades/include/hades/syscall.h
new file mode 100644
index 00000000..243a3345
--- /dev/null
+++ b/sysdeps/hades/include/hades/syscall.h
@@ -0,0 +1,193 @@
+#ifndef HADES_SYSCALL_H
+#define HADES_SYSCALL_H
+
+#define SYS_openat 0
+#define SYS_close 1
+#define SYS_read 2
+#define SYS_write 3
+#define SYS_seek 4
+#define SYS_dup2 5
+#define SYS_mmap 6
+#define SYS_munmap 7
+
+#define SYS_set_fs_base 8
+#define SYS_set_gs_base 9
+
+#define SYS_exit 12
+#define SYS_getpid 13
+#define SYS_gettid 14
+#define SYS_getppid 15
+
+#define SYS_fcntl 16
+#define SYS_lstatat 17
+#define SYS_ioctl 18
+#define SYS_fork 19
+#define SYS_exec 20
+#define SYS_futex 21
+#define SYS_waitpid 22
+#define SYS_readdir 23
+#define SYS_getcwd 24
+#define SYS_chdir 25
+#define SYS_pipe 27
+
+#define SYS_sigenter 39
+#define SYS_sigaction 40
+#define SYS_sigpending 41
+#define SYS_sigprocmask 42
+#define SYS_kill 43
+#define SYS_setpgid 44
+#define SYS_getpgid 45
+#define SYS_setsid 46
+#define SYS_getsid 47
+#define SYS_pause 48
+#define SYS_sigsuspend 49
+#define SYS_sigreturn 50
+
+#define SYS_unlinkat 51
+#define SYS_renameat 52
+#define SYS_mkdirat 53
+#define SYS_sleep 54
+#define SYS_clock_gettime 55
+#define SYS_clock_get 56
+#define SYS_linkat 57
+
+#define SYS_user_log 58
+
+extern "C" {
+    using sc_word_t = long;
+    
+    static sc_word_t syscall0(int sc) {
+        sc_word_t ret;
+        asm volatile("syscall" : "=a"(ret) : "a"(sc) : "rcx", "r11", "memory");
+        return ret;
+    }
+
+    static sc_word_t syscall1(int sc, sc_word_t arg1) {
+        sc_word_t ret;
+        asm volatile("syscall"
+                    : "=a"(ret)
+                    : "a"(sc), "D"(arg1)
+                    : "rcx", "r11", "memory");
+        return ret;
+    }
+
+    static sc_word_t syscall2(int sc, sc_word_t arg1, sc_word_t arg2) {
+        sc_word_t ret;
+        asm volatile("syscall"
+                    : "=a"(ret)
+                    : "a"(sc), "D"(arg1), "S"(arg2)
+                    : "rcx", "r11", "memory");
+        return ret;
+    }
+
+    static sc_word_t syscall3(int sc, sc_word_t arg1, sc_word_t arg2,
+                            sc_word_t arg3) {
+        sc_word_t ret;
+        asm volatile("syscall"
+                    : "=a"(ret)
+                    : "a"(sc), "D"(arg1), "S"(arg2), "d"(arg3)
+                    : "rcx", "r11", "memory");
+        return ret;
+    }
+
+    static sc_word_t syscall4(int sc, sc_word_t arg1, sc_word_t arg2,
+                            sc_word_t arg3, sc_word_t arg4) {
+        sc_word_t ret;
+
+        register sc_word_t arg4_reg asm("r10") = arg4;
+
+        asm volatile("syscall"
+                    : "=a"(ret)
+                    : "a"(sc), "D"(arg1), "S"(arg2), "d"(arg3), "r"(arg4_reg)
+                    : "rcx", "r11", "memory");
+        return ret;
+    }
+
+    static sc_word_t syscall5(int sc, sc_word_t arg1, sc_word_t arg2,
+                            sc_word_t arg3, sc_word_t arg4, sc_word_t arg5) {
+        sc_word_t ret;
+
+        register sc_word_t arg4_reg asm("r10") = arg4;
+        register sc_word_t arg5_reg asm("r8") = arg5;
+
+        asm volatile("syscall"
+                    : "=a"(ret)
+                    : "a"(sc), "D"(arg1), "S"(arg2), "d"(arg3), "r"(arg4_reg),
+                    "r"(arg5_reg)
+                    : "rcx", "r11", "memory");
+        return ret;
+    }
+
+    static sc_word_t syscall6(int sc, sc_word_t arg1, sc_word_t arg2,
+                            sc_word_t arg3, sc_word_t arg4, sc_word_t arg5,
+                            sc_word_t arg6) {
+        sc_word_t ret;
+
+        register sc_word_t arg4_reg asm("r10") = arg4;
+        register sc_word_t arg5_reg asm("r8") = arg5;
+        register sc_word_t arg6_reg asm("r9") = arg6;
+
+        asm volatile("syscall"
+                    : "=a"(ret)
+                    : "a"(sc), "D"(arg1), "S"(arg2), "d"(arg3), "r"(arg4_reg),
+                    "r"(arg5_reg), "r"(arg6_reg)
+                    : "rcx", "r11", "memory");
+        return ret;
+    }
+}
+
+__attribute__((__always_inline__)) inline sc_word_t sc_cast(long x) { return x; }
+__attribute__((__always_inline__)) inline sc_word_t sc_cast(const void *x) {
+    return reinterpret_cast<sc_word_t>(x);
+}
+
+__attribute__((__always_inline__)) static inline long _syscall(int call) {
+    return syscall0(call);
+}
+
+__attribute__((__always_inline__)) static inline long _syscall(int call,
+                                                           sc_word_t arg0) {
+    return syscall1(call, arg0);
+}
+
+__attribute__((__always_inline__)) static inline long
+_syscall(int call, sc_word_t arg0, sc_word_t arg1) {
+    return syscall2(call, arg0, arg1);
+}
+
+__attribute__((__always_inline__)) static inline long
+_syscall(int call, sc_word_t arg0, sc_word_t arg1, sc_word_t arg2) {
+    return syscall3(call, arg0, arg1, arg2);
+}
+
+__attribute__((__always_inline__)) static inline long
+_syscall(int call, sc_word_t arg0, sc_word_t arg1, sc_word_t arg2,
+         sc_word_t arg3) {
+    return syscall4(call, arg0, arg1, arg2, arg3);
+}
+
+__attribute__((__always_inline__)) static inline long
+_syscall(int call, sc_word_t arg0, sc_word_t arg1, sc_word_t arg2,
+         sc_word_t arg3, sc_word_t arg4) {
+    return syscall5(call, arg0, arg1, arg2, arg3, arg4);
+}
+
+__attribute__((__always_inline__)) static inline long
+_syscall(int call, sc_word_t arg0, sc_word_t arg1, sc_word_t arg2,
+         sc_word_t arg3, sc_word_t arg4, sc_word_t arg5) {
+    return syscall6(call, arg0, arg1, arg2, arg3, arg4, arg5);
+}
+
+template <typename... T>
+__attribute__((__always_inline__)) static inline long syscall(sc_word_t call,
+                                                          T... args) {
+    return _syscall(call, sc_cast(args)...);
+}
+
+inline int sc_error(long ret) {
+    if (ret < 0)
+        return -ret;
+    return 0;
+}
+
+#endif
diff --git a/sysdeps/hades/include/linux/fb.h b/sysdeps/hades/include/linux/fb.h
new file mode 100644
index 00000000..d5e6d88d
--- /dev/null
+++ b/sysdeps/hades/include/linux/fb.h
@@ -0,0 +1,400 @@
+/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */
+#ifndef _LINUX_FB_H
+#define _LINUX_FB_H
+
+#include <stddef.h>
+#include <asm/ioctl.h>
+
+/* Definitions of frame buffers						*/
+
+#define FB_MAX			32	/* sufficient for now */
+
+/* ioctls
+   0x46 is 'F'								*/
+#define FBIOGET_VSCREENINFO	0x4600
+#define FBIOPUT_VSCREENINFO	0x4601
+#define FBIOGET_FSCREENINFO	0x4602
+#define FBIOGETCMAP		0x4604
+#define FBIOPUTCMAP		0x4605
+#define FBIOPAN_DISPLAY		0x4606
+#define FBIO_CURSOR            _IOWR('F', 0x08, struct fb_cursor)
+/* 0x4607-0x460B are defined below */
+/* #define FBIOGET_MONITORSPEC	0x460C */
+/* #define FBIOPUT_MONITORSPEC	0x460D */
+/* #define FBIOSWITCH_MONIBIT	0x460E */
+#define FBIOGET_CON2FBMAP	0x460F
+#define FBIOPUT_CON2FBMAP	0x4610
+#define FBIOBLANK		0x4611		/* arg: 0 or vesa level + 1 */
+#define FBIOGET_VBLANK		_IOR('F', 0x12, struct fb_vblank)
+#define FBIO_ALLOC              0x4613
+#define FBIO_FREE               0x4614
+#define FBIOGET_GLYPH           0x4615
+#define FBIOGET_HWCINFO         0x4616
+#define FBIOPUT_MODEINFO        0x4617
+#define FBIOGET_DISPINFO        0x4618
+#define FBIO_WAITFORVSYNC	_IOW('F', 0x20, uint32_t)
+
+#define FB_TYPE_PACKED_PIXELS		0	/* Packed Pixels	*/
+#define FB_TYPE_PLANES			1	/* Non interleaved planes */
+#define FB_TYPE_INTERLEAVED_PLANES	2	/* Interleaved planes	*/
+#define FB_TYPE_TEXT			3	/* Text/attributes	*/
+#define FB_TYPE_VGA_PLANES		4	/* EGA/VGA planes	*/
+#define FB_TYPE_FOURCC			5	/* Type identified by a V4L2 FOURCC */
+
+#define FB_AUX_TEXT_MDA		0	/* Monochrome text */
+#define FB_AUX_TEXT_CGA		1	/* CGA/EGA/VGA Color text */
+#define FB_AUX_TEXT_S3_MMIO	2	/* S3 MMIO fasttext */
+#define FB_AUX_TEXT_MGA_STEP16	3	/* MGA Millenium I: text, attr, 14 reserved bytes */
+#define FB_AUX_TEXT_MGA_STEP8	4	/* other MGAs:      text, attr,  6 reserved bytes */
+#define FB_AUX_TEXT_SVGA_GROUP	8	/* 8-15: SVGA tileblit compatible modes */
+#define FB_AUX_TEXT_SVGA_MASK	7	/* lower three bits says step */
+#define FB_AUX_TEXT_SVGA_STEP2	8	/* SVGA text mode:  text, attr */
+#define FB_AUX_TEXT_SVGA_STEP4	9	/* SVGA text mode:  text, attr,  2 reserved bytes */
+#define FB_AUX_TEXT_SVGA_STEP8	10	/* SVGA text mode:  text, attr,  6 reserved bytes */
+#define FB_AUX_TEXT_SVGA_STEP16	11	/* SVGA text mode:  text, attr, 14 reserved bytes */
+#define FB_AUX_TEXT_SVGA_LAST	15	/* reserved up to 15 */
+
+#define FB_AUX_VGA_PLANES_VGA4		0	/* 16 color planes (EGA/VGA) */
+#define FB_AUX_VGA_PLANES_CFB4		1	/* CFB4 in planes (VGA) */
+#define FB_AUX_VGA_PLANES_CFB8		2	/* CFB8 in planes (VGA) */
+
+#define FB_VISUAL_MONO01		0	/* Monochr. 1=Black 0=White */
+#define FB_VISUAL_MONO10		1	/* Monochr. 1=White 0=Black */
+#define FB_VISUAL_TRUECOLOR		2	/* True color	*/
+#define FB_VISUAL_PSEUDOCOLOR		3	/* Pseudo color (like atari) */
+#define FB_VISUAL_DIRECTCOLOR		4	/* Direct color */
+#define FB_VISUAL_STATIC_PSEUDOCOLOR	5	/* Pseudo color readonly */
+#define FB_VISUAL_FOURCC		6	/* Visual identified by a V4L2 FOURCC */
+
+#define FB_ACCEL_NONE		0	/* no hardware accelerator	*/
+#define FB_ACCEL_ATARIBLITT	1	/* Atari Blitter		*/
+#define FB_ACCEL_AMIGABLITT	2	/* Amiga Blitter                */
+#define FB_ACCEL_S3_TRIO64	3	/* Cybervision64 (S3 Trio64)    */
+#define FB_ACCEL_NCR_77C32BLT	4	/* RetinaZ3 (NCR 77C32BLT)      */
+#define FB_ACCEL_S3_VIRGE	5	/* Cybervision64/3D (S3 ViRGE)	*/
+#define FB_ACCEL_ATI_MACH64GX	6	/* ATI Mach 64GX family		*/
+#define FB_ACCEL_DEC_TGA	7	/* DEC 21030 TGA		*/
+#define FB_ACCEL_ATI_MACH64CT	8	/* ATI Mach 64CT family		*/
+#define FB_ACCEL_ATI_MACH64VT	9	/* ATI Mach 64CT family VT class */
+#define FB_ACCEL_ATI_MACH64GT	10	/* ATI Mach 64CT family GT class */
+#define FB_ACCEL_SUN_CREATOR	11	/* Sun Creator/Creator3D	*/
+#define FB_ACCEL_SUN_CGSIX	12	/* Sun cg6			*/
+#define FB_ACCEL_SUN_LEO	13	/* Sun leo/zx			*/
+#define FB_ACCEL_IMS_TWINTURBO	14	/* IMS Twin Turbo		*/
+#define FB_ACCEL_3DLABS_PERMEDIA2 15	/* 3Dlabs Permedia 2		*/
+#define FB_ACCEL_MATROX_MGA2064W 16	/* Matrox MGA2064W (Millenium)	*/
+#define FB_ACCEL_MATROX_MGA1064SG 17	/* Matrox MGA1064SG (Mystique)	*/
+#define FB_ACCEL_MATROX_MGA2164W 18	/* Matrox MGA2164W (Millenium II) */
+#define FB_ACCEL_MATROX_MGA2164W_AGP 19	/* Matrox MGA2164W (Millenium II) */
+#define FB_ACCEL_MATROX_MGAG100	20	/* Matrox G100 (Productiva G100) */
+#define FB_ACCEL_MATROX_MGAG200	21	/* Matrox G200 (Myst, Mill, ...) */
+#define FB_ACCEL_SUN_CG14	22	/* Sun cgfourteen		 */
+#define FB_ACCEL_SUN_BWTWO	23	/* Sun bwtwo			*/
+#define FB_ACCEL_SUN_CGTHREE	24	/* Sun cgthree			*/
+#define FB_ACCEL_SUN_TCX	25	/* Sun tcx			*/
+#define FB_ACCEL_MATROX_MGAG400	26	/* Matrox G400			*/
+#define FB_ACCEL_NV3		27	/* nVidia RIVA 128              */
+#define FB_ACCEL_NV4		28	/* nVidia RIVA TNT		*/
+#define FB_ACCEL_NV5		29	/* nVidia RIVA TNT2		*/
+#define FB_ACCEL_CT_6555x	30	/* C&T 6555x			*/
+#define FB_ACCEL_3DFX_BANSHEE	31	/* 3Dfx Banshee			*/
+#define FB_ACCEL_ATI_RAGE128	32	/* ATI Rage128 family		*/
+#define FB_ACCEL_IGS_CYBER2000	33	/* CyberPro 2000		*/
+#define FB_ACCEL_IGS_CYBER2010	34	/* CyberPro 2010		*/
+#define FB_ACCEL_IGS_CYBER5000	35	/* CyberPro 5000		*/
+#define FB_ACCEL_SIS_GLAMOUR    36	/* SiS 300/630/540              */
+#define FB_ACCEL_3DLABS_PERMEDIA3 37	/* 3Dlabs Permedia 3		*/
+#define FB_ACCEL_ATI_RADEON	38	/* ATI Radeon family		*/
+#define FB_ACCEL_I810           39      /* Intel 810/815                */
+#define FB_ACCEL_SIS_GLAMOUR_2  40	/* SiS 315, 650, 740		*/
+#define FB_ACCEL_SIS_XABRE      41	/* SiS 330 ("Xabre")		*/
+#define FB_ACCEL_I830           42      /* Intel 830M/845G/85x/865G     */
+#define FB_ACCEL_NV_10          43      /* nVidia Arch 10               */
+#define FB_ACCEL_NV_20          44      /* nVidia Arch 20               */
+#define FB_ACCEL_NV_30          45      /* nVidia Arch 30               */
+#define FB_ACCEL_NV_40          46      /* nVidia Arch 40               */
+#define FB_ACCEL_XGI_VOLARI_V	47	/* XGI Volari V3XT, V5, V8      */
+#define FB_ACCEL_XGI_VOLARI_Z	48	/* XGI Volari Z7                */
+#define FB_ACCEL_OMAP1610	49	/* TI OMAP16xx                  */
+#define FB_ACCEL_TRIDENT_TGUI	50	/* Trident TGUI			*/
+#define FB_ACCEL_TRIDENT_3DIMAGE 51	/* Trident 3DImage		*/
+#define FB_ACCEL_TRIDENT_BLADE3D 52	/* Trident Blade3D		*/
+#define FB_ACCEL_TRIDENT_BLADEXP 53	/* Trident BladeXP		*/
+#define FB_ACCEL_CIRRUS_ALPINE   53	/* Cirrus Logic 543x/544x/5480	*/
+#define FB_ACCEL_NEOMAGIC_NM2070 90	/* NeoMagic NM2070              */
+#define FB_ACCEL_NEOMAGIC_NM2090 91	/* NeoMagic NM2090              */
+#define FB_ACCEL_NEOMAGIC_NM2093 92	/* NeoMagic NM2093              */
+#define FB_ACCEL_NEOMAGIC_NM2097 93	/* NeoMagic NM2097              */
+#define FB_ACCEL_NEOMAGIC_NM2160 94	/* NeoMagic NM2160              */
+#define FB_ACCEL_NEOMAGIC_NM2200 95	/* NeoMagic NM2200              */
+#define FB_ACCEL_NEOMAGIC_NM2230 96	/* NeoMagic NM2230              */
+#define FB_ACCEL_NEOMAGIC_NM2360 97	/* NeoMagic NM2360              */
+#define FB_ACCEL_NEOMAGIC_NM2380 98	/* NeoMagic NM2380              */
+#define FB_ACCEL_PXA3XX		 99	/* PXA3xx			*/
+
+#define FB_ACCEL_SAVAGE4        0x80	/* S3 Savage4                   */
+#define FB_ACCEL_SAVAGE3D       0x81	/* S3 Savage3D                  */
+#define FB_ACCEL_SAVAGE3D_MV    0x82	/* S3 Savage3D-MV               */
+#define FB_ACCEL_SAVAGE2000     0x83	/* S3 Savage2000                */
+#define FB_ACCEL_SAVAGE_MX_MV   0x84	/* S3 Savage/MX-MV              */
+#define FB_ACCEL_SAVAGE_MX      0x85	/* S3 Savage/MX                 */
+#define FB_ACCEL_SAVAGE_IX_MV   0x86	/* S3 Savage/IX-MV              */
+#define FB_ACCEL_SAVAGE_IX      0x87	/* S3 Savage/IX                 */
+#define FB_ACCEL_PROSAVAGE_PM   0x88	/* S3 ProSavage PM133           */
+#define FB_ACCEL_PROSAVAGE_KM   0x89	/* S3 ProSavage KM133           */
+#define FB_ACCEL_S3TWISTER_P    0x8a	/* S3 Twister                   */
+#define FB_ACCEL_S3TWISTER_K    0x8b	/* S3 TwisterK                  */
+#define FB_ACCEL_SUPERSAVAGE    0x8c    /* S3 Supersavage               */
+#define FB_ACCEL_PROSAVAGE_DDR  0x8d	/* S3 ProSavage DDR             */
+#define FB_ACCEL_PROSAVAGE_DDRK 0x8e	/* S3 ProSavage DDR-K           */
+
+#define FB_ACCEL_PUV3_UNIGFX	0xa0	/* PKUnity-v3 Unigfx		*/
+
+#define FB_CAP_FOURCC		1	/* Device supports FOURCC-based formats */
+
+struct fb_fix_screeninfo {
+	char id[16];			/* identification string eg "TT Builtin" */
+	unsigned long smem_start;	/* Start of frame buffer mem */
+					/* (physical address) */
+	uint32_t smem_len;			/* Length of frame buffer mem */
+	uint32_t type;			/* see FB_TYPE_*		*/
+	uint32_t type_aux;			/* Interleave for interleaved Planes */
+	uint32_t visual;			/* see FB_VISUAL_*		*/ 
+	uint16_t xpanstep;			/* zero if no hardware panning  */
+	uint16_t ypanstep;			/* zero if no hardware panning  */
+	uint16_t ywrapstep;		/* zero if no hardware ywrap    */
+	uint32_t line_length;		/* length of a line in bytes    */
+	unsigned long mmio_start;	/* Start of Memory Mapped I/O   */
+					/* (physical address) */
+	uint32_t mmio_len;			/* Length of Memory Mapped I/O  */
+	uint32_t accel;			/* Indicate to driver which	*/
+					/*  specific chip/card we have	*/
+	uint16_t capabilities;		/* see FB_CAP_*			*/
+	uint16_t reserved[2];		/* Reserved for future compatibility */
+};
+
+/* Interpretation of offset for color fields: All offsets are from the right,
+ * inside a "pixel" value, which is exactly 'bits_per_pixel' wide (means: you
+ * can use the offset as right argument to <<). A pixel afterwards is a bit
+ * stream and is written to video memory as that unmodified.
+ *
+ * For pseudocolor: offset and length should be the same for all color
+ * components. Offset specifies the position of the least significant bit
+ * of the palette index in a pixel value. Length indicates the number
+ * of available palette entries (i.e. # of entries = 1 << length).
+ */
+struct fb_bitfield {
+	uint32_t offset;			/* beginning of bitfield	*/
+	uint32_t length;			/* length of bitfield		*/
+	uint32_t msb_right;		/* != 0 : Most significant bit is */ 
+					/* right */ 
+};
+
+#define FB_NONSTD_HAM		1	/* Hold-And-Modify (HAM)        */
+#define FB_NONSTD_REV_PIX_IN_B	2	/* order of pixels in each byte is reversed */
+
+#define FB_ACTIVATE_NOW		0	/* set values immediately (or vbl)*/
+#define FB_ACTIVATE_NXTOPEN	1	/* activate on next open	*/
+#define FB_ACTIVATE_TEST	2	/* don't set, round up impossible */
+#define FB_ACTIVATE_MASK       15
+					/* values			*/
+#define FB_ACTIVATE_VBL	       16	/* activate values on next vbl  */
+#define FB_CHANGE_CMAP_VBL     32	/* change colormap on vbl	*/
+#define FB_ACTIVATE_ALL	       64	/* change all VCs on this fb	*/
+#define FB_ACTIVATE_FORCE     128	/* force apply even when no change*/
+#define FB_ACTIVATE_INV_MODE  256       /* invalidate videomode */
+#define FB_ACTIVATE_KD_TEXT   512       /* for KDSET vt ioctl */
+
+#define FB_ACCELF_TEXT		1	/* (OBSOLETE) see fb_info.flags and vc_mode */
+
+#define FB_SYNC_HOR_HIGH_ACT	1	/* horizontal sync high active	*/
+#define FB_SYNC_VERT_HIGH_ACT	2	/* vertical sync high active	*/
+#define FB_SYNC_EXT		4	/* external sync		*/
+#define FB_SYNC_COMP_HIGH_ACT	8	/* composite sync high active   */
+#define FB_SYNC_BROADCAST	16	/* broadcast video timings      */
+					/* vtotal = 144d/288n/576i => PAL  */
+					/* vtotal = 121d/242n/484i => NTSC */
+#define FB_SYNC_ON_GREEN	32	/* sync on green */
+
+#define FB_VMODE_NONINTERLACED  0	/* non interlaced */
+#define FB_VMODE_INTERLACED	1	/* interlaced	*/
+#define FB_VMODE_DOUBLE		2	/* double scan */
+#define FB_VMODE_ODD_FLD_FIRST	4	/* interlaced: top line first */
+#define FB_VMODE_MASK		255
+
+#define FB_VMODE_YWRAP		256	/* ywrap instead of panning     */
+#define FB_VMODE_SMOOTH_XPAN	512	/* smooth xpan possible (internally used) */
+#define FB_VMODE_CONUPDATE	512	/* don't update x/yoffset	*/
+
+/*
+ * Display rotation support
+ */
+#define FB_ROTATE_UR      0
+#define FB_ROTATE_CW      1
+#define FB_ROTATE_UD      2
+#define FB_ROTATE_CCW     3
+
+#define PICOS2KHZ(a) (1000000000UL/(a))
+#define KHZ2PICOS(a) (1000000000UL/(a))
+
+struct fb_var_screeninfo {
+	uint32_t xres;			/* visible resolution		*/
+	uint32_t yres;
+	uint32_t xres_virtual;		/* virtual resolution		*/
+	uint32_t yres_virtual;
+	uint32_t xoffset;			/* offset from virtual to visible */
+	uint32_t yoffset;			/* resolution			*/
+
+	uint32_t bits_per_pixel;		/* guess what			*/
+	uint32_t grayscale;		/* 0 = color, 1 = grayscale,	*/
+					/* >1 = FOURCC			*/
+	struct fb_bitfield red;		/* bitfield in fb mem if true color, */
+	struct fb_bitfield green;	/* else only length is significant */
+	struct fb_bitfield blue;
+	struct fb_bitfield transp;	/* transparency			*/	
+
+	uint32_t nonstd;			/* != 0 Non standard pixel format */
+
+	uint32_t activate;			/* see FB_ACTIVATE_*		*/
+
+	uint32_t height;			/* height of picture in mm    */
+	uint32_t width;			/* width of picture in mm     */
+
+	uint32_t accel_flags;		/* (OBSOLETE) see fb_info.flags */
+
+	/* Timing: All values in pixclocks, except pixclock (of course) */
+	uint32_t pixclock;			/* pixel clock in ps (pico seconds) */
+	uint32_t left_margin;		/* time from sync to picture	*/
+	uint32_t right_margin;		/* time from picture to sync	*/
+	uint32_t upper_margin;		/* time from sync to picture	*/
+	uint32_t lower_margin;
+	uint32_t hsync_len;		/* length of horizontal sync	*/
+	uint32_t vsync_len;		/* length of vertical sync	*/
+	uint32_t sync;			/* see FB_SYNC_*		*/
+	uint32_t vmode;			/* see FB_VMODE_*		*/
+	uint32_t rotate;			/* angle we rotate counter clockwise */
+	uint32_t colorspace;		/* colorspace for FOURCC-based modes */
+	uint32_t reserved[4];		/* Reserved for future compatibility */
+};
+
+struct fb_cmap {
+	uint32_t start;			/* First entry	*/
+	uint32_t len;			/* Number of entries */
+	uint16_t *red;			/* Red values	*/
+	uint16_t *green;
+	uint16_t *blue;
+	uint16_t *transp;			/* transparency, can be NULL */
+};
+
+struct fb_con2fbmap {
+	uint32_t console;
+	uint32_t framebuffer;
+};
+
+/* VESA Blanking Levels */
+#define VESA_NO_BLANKING        0
+#define VESA_VSYNC_SUSPEND      1
+#define VESA_HSYNC_SUSPEND      2
+#define VESA_POWERDOWN          3
+
+
+enum {
+	/* screen: unblanked, hsync: on,  vsync: on */
+	FB_BLANK_UNBLANK       = VESA_NO_BLANKING,
+
+	/* screen: blanked,   hsync: on,  vsync: on */
+	FB_BLANK_NORMAL        = VESA_NO_BLANKING + 1,
+
+	/* screen: blanked,   hsync: on,  vsync: off */
+	FB_BLANK_VSYNC_SUSPEND = VESA_VSYNC_SUSPEND + 1,
+
+	/* screen: blanked,   hsync: off, vsync: on */
+	FB_BLANK_HSYNC_SUSPEND = VESA_HSYNC_SUSPEND + 1,
+
+	/* screen: blanked,   hsync: off, vsync: off */
+	FB_BLANK_POWERDOWN     = VESA_POWERDOWN + 1
+};
+
+#define FB_VBLANK_VBLANKING	0x001	/* currently in a vertical blank */
+#define FB_VBLANK_HBLANKING	0x002	/* currently in a horizontal blank */
+#define FB_VBLANK_HAVE_VBLANK	0x004	/* vertical blanks can be detected */
+#define FB_VBLANK_HAVE_HBLANK	0x008	/* horizontal blanks can be detected */
+#define FB_VBLANK_HAVE_COUNT	0x010	/* global retrace counter is available */
+#define FB_VBLANK_HAVE_VCOUNT	0x020	/* the vcount field is valid */
+#define FB_VBLANK_HAVE_HCOUNT	0x040	/* the hcount field is valid */
+#define FB_VBLANK_VSYNCING	0x080	/* currently in a vsync */
+#define FB_VBLANK_HAVE_VSYNC	0x100	/* verical syncs can be detected */
+
+struct fb_vblank {
+	uint32_t flags;			/* FB_VBLANK flags */
+	uint32_t count;			/* counter of retraces since boot */
+	uint32_t vcount;			/* current scanline position */
+	uint32_t hcount;			/* current scandot position */
+	uint32_t reserved[4];		/* reserved for future compatibility */
+};
+
+/* Internal HW accel */
+#define ROP_COPY 0
+#define ROP_XOR  1
+
+struct fb_copyarea {
+	uint32_t dx;
+	uint32_t dy;
+	uint32_t width;
+	uint32_t height;
+	uint32_t sx;
+	uint32_t sy;
+};
+
+struct fb_fillrect {
+	uint32_t dx;	/* screen-relative */
+	uint32_t dy;
+	uint32_t width;
+	uint32_t height;
+	uint32_t color;
+	uint32_t rop;
+};
+
+struct fb_image {
+	uint32_t dx;		/* Where to place image */
+	uint32_t dy;
+	uint32_t width;		/* Size of image */
+	uint32_t height;
+	uint32_t fg_color;		/* Only used when a mono bitmap */
+	uint32_t bg_color;
+	uint8_t  depth;		/* Depth of the image */
+	const char *data;	/* Pointer to image data */
+	struct fb_cmap cmap;	/* color map info */
+};
+
+/*
+ * hardware cursor control
+ */
+
+#define FB_CUR_SETIMAGE 0x01
+#define FB_CUR_SETPOS   0x02
+#define FB_CUR_SETHOT   0x04
+#define FB_CUR_SETCMAP  0x08
+#define FB_CUR_SETSHAPE 0x10
+#define FB_CUR_SETSIZE	0x20
+#define FB_CUR_SETALL   0xFF
+
+struct fbcurpos {
+	uint16_t x, y;
+};
+
+struct fb_cursor {
+	uint16_t set;		/* what to set */
+	uint16_t enable;		/* cursor on/off */
+	uint16_t rop;		/* bitop operation */
+	const char *mask;	/* cursor mask bits */
+	struct fbcurpos hot;	/* cursor hot spot */
+	struct fb_image	image;	/* Cursor image */
+};
+
+/* Settings for the generic backlight code */
+#define FB_BACKLIGHT_LEVELS	128
+#define FB_BACKLIGHT_MAX	0xFF
+
+
+#endif /* _LINUX_FB_H */
diff --git a/sysdeps/hades/meson.build b/sysdeps/hades/meson.build
new file mode 100644
index 00000000..146e29b2
--- /dev/null
+++ b/sysdeps/hades/meson.build
@@ -0,0 +1,89 @@
+
+rtld_sources += files(
+	'generic/generic.cpp',
+	'generic/filesystem.cpp'
+)
+
+libc_sources += files(
+	'generic/entry.cpp',
+	'generic/generic.cpp',
+	'generic/filesystem.cpp',
+	'generic/signals.cpp',
+    'generic/signals.S'
+)
+
+if not no_headers
+	install_headers(
+		'include/abi-bits/auxv.h',
+		'include/abi-bits/seek-whence.h',
+		'include/abi-bits/vm-flags.h',
+		'include/abi-bits/errno.h',
+		'include/abi-bits/fcntl.h',
+		'include/abi-bits/in.h',
+		'include/abi-bits/resource.h',
+		'include/abi-bits/stat.h',
+		'include/abi-bits/signal.h',
+		'include/abi-bits/socket.h',
+		'include/abi-bits/termios.h',
+		'include/abi-bits/blkcnt_t.h',
+		'include/abi-bits/blksize_t.h',
+		'include/abi-bits/dev_t.h',
+		'include/abi-bits/gid_t.h',
+		'include/abi-bits/ino_t.h',
+		'include/abi-bits/mode_t.h',
+		'include/abi-bits/nlink_t.h',
+		'include/abi-bits/pid_t.h',
+		'include/abi-bits/uid_t.h',
+		'include/abi-bits/access.h',
+		'include/abi-bits/wait.h',
+		'include/abi-bits/limits.h',
+		'include/abi-bits/utsname.h',
+		'include/abi-bits/ptrace.h',
+		'include/abi-bits/poll.h',
+		'include/abi-bits/epoll.h',
+		'include/abi-bits/packet.h',
+		'include/abi-bits/inotify.h',
+		'include/abi-bits/clockid_t.h',
+		'include/abi-bits/shm.h',
+		'include/abi-bits/mqueue.h',
+		'include/abi-bits/suseconds_t.h',
+		'include/abi-bits/fsfilcnt_t.h',
+		'include/abi-bits/fsblkcnt_t.h',
+		'include/abi-bits/socklen_t.h',
+		'include/abi-bits/statfs.h',
+		'include/abi-bits/statvfs.h',
+		'include/abi-bits/ioctls.h',
+		'include/abi-bits/xattr.h',
+		'include/abi-bits/msg.h',
+		subdir: 'abi-bits',
+        follow_symlinks: true
+	)
+
+    install_headers(
+		'include/asm/ioctl.h',
+		'include/asm/ioctls.h',
+		subdir: 'asm',
+	)
+
+	install_headers(
+		'include/linux/fb.h',
+		subdir: 'linux',
+	)
+
+	install_headers(
+		'include/hades/syscall.h',
+		subdir: 'hades',
+	)
+endif
+
+if not headers_only
+	crt = custom_target('crt0',
+		build_by_default: true,
+		command: c_compiler.cmd_array() + ['-c', '-o', '@OUTPUT@', '@INPUT@'],
+		input: 'crt-x86_64/crt0.S',
+		output: 'crt0.o',
+		install: true,
+		install_dir: get_option('libdir')
+	)
+endif
+
-- 
2.45.2

